<html style="overflow: hidden">
    
<script src="TweenLite.min.js"></script>
<script src="EasePack.min.js"></script>
<!-- <script src="demo.js"></script> -->

<style>
body {
	width: 100vh;
	height: 90vh;
	color: rgba(255, 255, 255, 0);
	background: radial-gradient( rgb(0, 7, 4), rgb(0, 15, 2) );
	background-size: 400% 400%;
	-webkit-animation: Gradient 44s ease infinite;
	-moz-animation: Gradient 44s ease infinite;
	animation: Gradient 44s ease infinite;
}

@-webkit-keyframes Gradient {
	0% {
		background-position: 0% 50%
	}
	50% {
		background-position: 100% 50%
	}
	100% {
		background-position: 0% 50%
	}
}

@-moz-keyframes Gradient {
	0% {
		background-position: 0% 50%
	}
	50% {
		background-position: 100% 50%
	}
	100% {
		background-position: 0% 50%
	}
}

@keyframes Gradient {
	0% {
		background-position: 0% 50%
	}
	50% {
		background-position: 100% 50%
	}
	100% {
		background-position: 0% 50%
	}
}

h1,
h6 {
	font-family: 'Open Sans';
	font-weight: 300;
	text-align: center;
	position: absolute;
	top: 45%;
	right: 0;
	left: 0;
}



















.newlinks :hover{
  color: #00155a;
  cursor: pointer;
}


.large-header {
   position: absolute;
   left:0px;
   width: 220vh;
   height: 100vh;
   background: rgba(216, 216, 216, 0);
   overflow: hidden;
   background-size: cover;
   background-position: center center;
   z-index: 0;
}



.main-title {
   position: absolute;
   margin: 0;
   padding: 0;
   color: #F9F1E9;
   text-align: center;
   top: 50%;
   left: 50%;
   -webkit-transform: translate3d(-50%, -50%, 0);
   transform: translate3d(-50%, -50%, 0);
}

.demo .main-title {
   text-transform: uppercase;
   font-size: 4.2em;
   letter-spacing: 0.1em;
}

.main-title .thin {
   font-weight: 200;
}

@media only screen and (max-width: 768px) {
   .demo .main-title {
      font-size: 3em;
   }
}


</style>

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300" type="text/css" />

<div class="container demo">
  <div class="content">
     <div id="large-header" class="large-header">
        <canvas id="demo-canvas" style="z-index: -1"></canvas>

        <script>


var width, height, largeHeader, canvas, ctx, points, target, animateHeader = true;

// Main
initHeader();
initAnimation();
addListeners();

function initHeader() {
    width = window.innerWidth;
    height = window.innerHeight;
    target = {x: width/2, y: height/2};

    largeHeader = document.getElementById('large-header');
    largeHeader.style.height = height+'px';

    canvas = document.getElementById('demo-canvas');
    canvas.width = width;
    canvas.height = height;
    ctx = canvas.getContext('2d');


    var noowidth = width*.2;
    var nooheight = height*.2
    // create points
    points = [];
    for(var x = 0; x < width; x = x + width/20) {
        for(var y = 0; y < height; y = y + height/20) {
            var px = x + Math.random()*width/20;
            var py = y + Math.random()*height/20;
            var p = {x: px, originX: px, y: py, originY: py };
            points.push(p);
        }
    }
    // for(var x = 0; x < width; x++) {
    //     for(var y = 0; y < height; y++) {
    //         var px = x + Math.random()*width/30;
    //         var py = y + Math.random()*height/30;
    //         var p = {x: px, originX: px, y: py, originY: py };
    //         points.push(p);
    //     }
    // }
;



    // for each point find the 5 closest points
    for(var i = 0; i < points.length; i++) {
        var closest = [];
        var p1 = points[i];
        for(var j = 0; j < points.length; j++) {
            var p2 = points[j]
            if(!(p1 == p2)) {
                var placed = false;
                for(var k = 0; k < 5; k++) {
                    if(!placed) {
                        if(closest[k] == undefined) {
                            closest[k] = p2;
                            placed = true;
                        }
                    }
                }

                for(var k = 0; k < 5; k++) {
                    if(!placed) {
                        if(getDistance(p1, p2) < getDistance(p1, closest[k])) {
                            closest[k] = p2;
                            placed = true;
                        }
                    }
                }
            }
        }
        p1.closest = closest;
    }

    // assign a circle to each point
    for(var i in points) {
        var c = new Circle(points[i], 2+Math.random()*2, 'rgba(255,255,255,0.3)');
        points[i].circle = c;
    }
}

// Event handling
function addListeners() {
    if(!('ontouchstart' in window)) {
        window.addEventListener('mousemove', mouseMove);
    }
    window.addEventListener('scroll', scrollCheck);
    window.addEventListener('resize', resize);
}

function mouseMove(e) {
    var posx = posy = 0;
    if (e.pageX || e.pageY) {
        posx = e.pageX;
        posy = e.pageY;
    }
    else if (e.clientX || e.clientY)    {
        posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }
    target.x = posx;
    target.y = posy;
}

function scrollCheck() {
    if(document.body.scrollTop > height) animateHeader = false;
    else animateHeader = true;
}

function resize() {
    width = window.innerWidth;
    height = window.innerHeight;
    largeHeader.style.height = height+'px';
    canvas.width = width;
    canvas.height = height;
}

// animation
function initAnimation() {
    animate();
    for(var i in points) {
        shiftPoint(points[i]);
    }
}

function animate() {
    if(animateHeader) {
        ctx.clearRect(0,0,width,height);
        for(var i in points) {
            // detect points in range
            if(Math.abs(getDistance(target, points[i])) < 800) {
                points[i].active = 0.99;   // .3
                points[i].circle.active = 0.99;    //.6
            } 
            else if(Math.abs(getDistance(target, points[i])) < 8000) {
                points[i].active = 0.31;   // .1
                points[i].circle.active = 0.13;   //.3
            } 
            else if(Math.abs(getDistance(target, points[i])) <19000) {
                points[i].active = 0.31;   // .1
                points[i].circle.active = 0.25;   //.3
            }
            else if(Math.abs(getDistance(target, points[i])) < 32000) {
                points[i].active = 0.31;   // .1
                points[i].circle.active = 0.09;   //.3
            } 

            //else if(Math.abs(getDistance(target, points[i])) < 1100) {
            //     points[i].active = 0.02;  //.02
            //     points[i].circle.active = 0.1;   //.1
            // } 
            else {
                points[i].active = 0.31;     //0
                points[i].circle.active = 0.00;     //0
            }

            drawLines(points[i]);
            points[i].circle.draw();
        }
    }
    requestAnimationFrame(animate);
}


// function animate() {
//     if(animateHeader) {
//         ctx.clearRect(0,0,width,height);
//         for(var i in points) {
//             // detect points in range
//             if(Math.abs(getDistance(target, points[i])) < 4000) {
//                 points[i].active = 0.19;   // .3
//                 points[i].circle.active = 0.19;    //.6
//             } else if(Math.abs(getDistance(target, points[i])) < 20000) {
//                 points[i].active = 0.03;   // .1
//                 points[i].circle.active = 0.1;   //.3
//             } else if(Math.abs(getDistance(target, points[i])) < 40000) {
//                 points[i].active = 0.02;  //.02
//                 points[i].circle.active = 0.1;   //.1
//             } else {
//                 points[i].active = 0.01;     //0
//                 points[i].circle.active = 0.08;     //0
//             }

//             drawLines(points[i]);
//             points[i].circle.draw();
//         }
//     }
//     requestAnimationFrame(animate);
// }











function shiftPoint(p) {
    TweenLite.to(p, 1.6+1*Math.random(), {x:p.originX-50+Math.random()*100,
        y: p.originY-50+Math.random()*100, ease:[Circ.easeInOutBounce],
        onComplete: function() {
            shiftPoint(p);
        }});
}

//rgb(68, 240, 168)
// Canvas manipulation
function drawLines(p) {
    if(!p.active) return;
    for(var i in p.closest) {

        var bbq = i-10;
        if (bbq<0){
            bbq=p.closest.length-1
        }
        else{bbq=0}


        ctx.beginPath();
        ctx.moveTo(p.x, p.y);
        ctx.lineTo(p.closest[i].x, p.closest[i].y);
        ctx.strokeStyle = 'rgba(68, 240, 168,'+ p.active/3+')';
        ctx.stroke();
    }
}

function Circle(pos,rad,color) {
    var _this = this;

    // constructor
    (function() {
        _this.pos = pos || null;
        _this.radius = rad || null;
        _this.color = color || null;
    })();

    this.draw = function() {
        if(!_this.active) return;
        ctx.beginPath();
        ctx.arc(_this.pos.x, _this.pos.y, _this.radius*1, 0, 8 * Math.PI, false);
        ctx.fillStyle = 'rgba(68, 240, 168,'+ _this.active+')';
        ctx.fill();
    };
}

// Util
function getDistance(p1, p2) {
    return Math.pow(p1.x/5 - p2.x/5, 2) + Math.pow(p1.y/5 - p2.y/5, 2);
    // divide p1/p2 to increase Radius of linkages
}


</script>
     </div>
  </div>
</div>
</html>
