<html style="overflow: hidden;">


<head>
  <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.5/lodash.js"></script>
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@300&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@500&display=swap" rel="stylesheet">
</head>



<style>

/* 
box-shadow: 0 10px 15px rgba(231, 231, 231, 0.521); */

/* 
--blue: #2c8ef8;
    --indigo: #727cf5;
    --purple: #6b5eae;
    --pink: #ff679b;
    --red: #fa5c7c;
    --orange: #fd7e14;
    --yellow: #ffbc00;
    --green: #0acf97;
    --teal: #02a8b5;
    --cyan: #39afd1;
    --white: #fff;
    --gray: #8391a2;
    --gray-dark: #e3eaef;
    --primary: #727cf5;
    --secondary: #464f5b;
    --success: #0acf97;
    --info: #39afd1;
    --warning: #ffbc00;
    --danger: #fa5c7c;
    --light: #464f5b;
    --dark: #f1f1f1; */


    body{
        background-color: #343a40;
        font-family: 'Raleway', sans-serif;
    }

    svg{

    border-width: 4px;
    min-height: 73%;
    min-width: 100%;
    /* position: relative; */
    display: block;
    border-width: 3px;
    /* top: 8vh; */
    border-style: solid;
    border-color: #ffffff;
    border-radius: 3px;
    background-color: #ffffff;
    position: absolute;
    right: -1;
    border-bottom-style: none;
    bottom: 0;

        
    }
    
    .button_search{
        height: 30px;
        width: 40px;
        left: 160px;
        top: -20px;
        position: relative;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        border-style: none;
        background-color: #727cf5;
        cursor: pointer;
        transition: .5s;
        }

        .button_search:hover{
        background-color: #4250f2;

        transition:.5s
        }
    
    .input_search{
        width: 670px;
        left: 160px;
        top: 10px;
        display: block;
        margin-left: auto;
        margin-right: auto;
        height: 30px;
        font-size: 18px;
        border-radius: 5px;
        color: white;
        font-weight: 500;
        text-indent: 10;
        background-color: #8391a2;
        border-style: none;
        box-shadow: 0 3px 8px rgba(169, 169, 169, 0.29);
        position: relative;
        transition: .5s;
    }
    
    /* .vizContainer {
    height: 754px;
    width: 1538px;
    position: relative;
    display: block;
    border-width: 1px;
    top: 8vh;
    border-style: solid;
    border-color: rgb(72, 72, 72);
    border-radius: 2px;
    margin-left: auto;
    margin-right: auto;
	box-shadow: 0 2.575rem 3.3rem rgba(0, 0, 0, 0.45);
    transition: .5s;
} */

.input_search:hover{
transition: .5s;
box-shadow: 0 8px 12px rgba(206, 206, 206, 0.438);
}










    .tooltip_class{
        border-width: 4px;
    min-height: 73%;
    min-width: 30%;
    max-width: 30%;
    display: block;
    border-width: 1px;
    border-style: solid;
    border-top-style: solid;
    border-right-color: #343a40;
    padding-top: 2px;
    border-radius: 3px;
    background-color: #f1f1f1;
    position: absolute;
    left: -37%;
    bottom: 0;
    box-shadow: 0 10px 45px #000000b2;
    transition: .5s;
    }
    .tooltip_class:hover{
        transition: .2s;
        background-color: #f3f3f3;
        box-shadow: 0 10px 65px #000000;
    }

    .tooltip_title{
        position: relative;
        top:5px;
        text-align: center;
        width: 100%;
    }

    .tooltip_type{
        position: relative;
        top:5px;
        text-align: center;
        width: 100%
    }

    .exit_button{
        position: absolute;
    top: 10px;
    left: 95%;
    height: 16px;
    width: 16px;
    border-radius: 50px;
    background-color: rgb(193, 0, 0);
    cursor: pointer;
    transition: .2s;
    }

    .exit_button:hover{
        background-color: rgb(255, 1, 1);
        box-shadow: 0 2px 28px #82828259;
        transition: .2s;

    }

    .edit_button{
        position: absolute;
    top: 10px;
    left: 1%;
    height: 35px;
    width: 35px;
    cursor: pointer;
    transition: .2s;
    }

    .edit_button:hover{
        height: 40;
        width: 40;
        transition: .2s;
        box-shadow: 0 2px 28px #82828259;

    }

    
    .link_button{
        position: absolute;
    top: 10px;
    left: 8%;
    height: 35px;
    width: 35px;
    cursor: pointer;
    transition: .2s;
    }

    .link_button:hover{
        height: 40;
        width: 40;
        transition: .2s;
        box-shadow: 0 2px 28px #82828259;

    }


    .remove_button{
        position: absolute;
    top: 10px;
    left: 15%;
    height: 35px;
    width: 35px;
    cursor: pointer;
    transition: .2s;
    }

    .remove_button:hover{
        height: 40;
        width: 40;
        transition: .2s;
        box-shadow: 0 2px 28px #82828259;

    }



    .OptionBar{
        list-style: none;
    left: .5%;
    width: 100%;
    height: 15%;
    display: block;
    margin: auto;
    padding: 0;
    white-space: nowrap;
    overflow-x: auto;
    overflow-y: hidden;
    top: -45px;
    position: relative;
    }

    .OptionBarOption{
        display: inline-block;
    width: 24.6%;
    height: 100%;
    background-color: rgba(255, 0, 0, 0);
    text-align: center;
    color:white;
    transition: .3s;
    border-radius: 5px;
    cursor: pointer;
    vertical-align: sub;
    }

    .OptionBarOption:hover{
        display: inline-block;
    width: 24.6%;
    height: 100%;
    background-color: rgba(141, 141, 141, 0.404);
    transition: .3s;
    border-radius: 12px;
    }




    .LegendFrame{
        border-width: 4px;
        min-height: 73%;
        min-width: 35%;
        display: block;
        border-width: 3px;
        border-style: solid;
        border-top-style: none;
        border-right-color: #8a8a8a;
        border-radius: 3px;
        background-color: #cecece;;
        position: absolute;
        left: -37%;
        bottom: 0;
    }


.table_header{
    width: 36%;
    padding: 20;
    font-size: 22px;
    font-weight: bolder;
    text-align: left;
    text-indent: 40px;
}

.row_spacer{
    text-align: left;
    text-indent: 50px;
    padding: 8px;
    font-size: 20px;
}

.headliner{
    position: relative;
    width: 101%;
    height: 67px;
    top: -68px;
    z-index: -1;
    left: -8px;
    background-color: #1f1f1f;
    box-shadow: 0 2px 28px #82828259;
}
    

    .menuJump{
    color: #1a2cff;
    font-weight: bolder;
    cursor: pointer;
    margin-bottom: 5px;
    transition: .6s;
    height: 27px;
    vertical-align: super;
    text-indent: 10px;
    }

    .menuJump:hover{
    transition: .1s;
    box-shadow: 0 6px 12px #4242429e;
    color: #001ff9;
    background-color: #97c1ff38;
    text-indent: 33px;
    }


    .CypherOptionWindow{
    width: 62%;
    margin: auto;
    border-radius: 3px;
    position: relative;
    height: 50%;
    top: 25%;
    border-style: solid;
    z-index: 1;
    background-color: #fbfbfb;
    display: block;
    border-color: grey;
    border-width: 1px;
    box-shadow: 0 2px 54px #8c8c8ca8;
    }



    .CypherOptionWindowFrame{
        position:absolute;
         height:100%; 
         width: 100%; 
         top:0 ; 
         left:0;
          background-color:#00000073;
          display:block;

    }

    .cypherbar{
        position: absolute;
    margin: auto;
    height: 10%;
    top: 45%;
    width: 80%;
    left: 10%;
    background-color: #dedede;
    border-bottom-color: red;
    box-shadow: 0 10px 25px #ff00002e;
    border-style: none;
    border-bottom-style: solid;
    border-radius: 3px;
    border-bottom-width: 1px;
    transition:.5s;
    font-family: 'Source Code Pro', monospace;
    font-size: 18px;
    color:black;
    text-indent: 20px;
    }

    .cypherbar:hover{
        transition:.2s;
        box-shadow: 0 10px 45px #ff00002e;
    }


    .cypherbartitle{

        font-family: 'Source Code Pro', monospace;
    position: absolute;
    margin: auto;
    height: 10%;
    top: 10%;
    text-align: center;
    width: 100%;
    }

    .cypherbartitlesub{
        font-family: 'Source Code Pro', monospace;
        position: absolute;
        margin: auto;
        height: 10%;
        top: 29%;
        width: 100%;
        text-align: center;

    }


    .cypherbartitleerror{
        font-family: 'Source Code Pro', monospace;
        position: absolute;
        margin: auto;
        height: 10%;
        top: 63%;
        width: 100%;
        text-align: center;

    }

    .cyphersubmit{
        font-family: 'Source Code Pro', monospace;
    position: absolute;
    margin: auto;
    height: 10%;
    background-color: rgb(0, 82, 18);
    border-radius: 5px;
    top: 68%;
    display: block;
    left: 43%;
    cursor: pointer;
    width: 12%;
    color: white;
    text-align: center;
    transition: .3s;
    text-align: center;
    }

    .cyphersubmit:hover{
        transition: .3s;
        color:rgb(203, 255, 210);
        background-color: rgb(0, 112, 24);
    }

    .GuidedOptionWindow{
        width: 75%;
    margin: auto;
    border-radius: 3px;
    position: relative;
    height: 60%;
    top: 20%;
    border-style: solid;
    z-index: 1;
    background-color: #fbfbfb;
    display: block;
    border-color: grey;
    border-width: 1px;
    box-shadow: 0 2px 54px #8c8c8ca8;
    }



    
    .GuidedOptionBar{
        list-style: none;
    width: 95%;
    height: 60%;
    display: block;
    margin: auto;
    padding: 0;
    white-space: nowrap;
    overflow-x: auto;
    overflow-y: hidden;
    top: 20%;
    position: relative;
    }

    .GuidedOptionBarOption{
        font-weight: bolder;
        display: inline-block;
    width: 49%;
    height: 100%;
    background-color: rgba(0, 4, 117, 0.63);;
    text-align: center;
    color:white;
    transition: .3s;
    border-radius: 5px;
    cursor: pointer;
    vertical-align: sub;
    margin:5px;
    }

    .GuidedOptionBarOption:hover{
        display: inline-block;
    background-color: rgba(8, 0, 53, 0.883);
    transition: .3s;
    border-radius: 12px;
    }


.labelselectClass{
    position: relative;
    font-size: 17px;
    top: 100px;
    left: 50;
    height: 42px;
    width: 464px;
    border-radius: 3px;
    text-align: center;
    font-family: Raleway;
    font-weight: 900;
    box-shadow: 0 8px 20px #aaaaaa18;
    transition: .2s;
}

.labelselectClass:hover{
transition: .5s;
box-shadow: 0 8px 32px #0000002c;
}

.calculatebutton{
    position: relative;
    lefT: -400;
    height: 100px;
    width: 383px;
    background-color: rgb(0, 76, 16);
    top: 259px;
    border-radius: 12px;
    color: white;
    font-size: 20px;
    transition: .15s;
    box-shadow: 0 2px 12px #00000032;
    cursor: pointer;

}
.calculatebutton:hover{
    transition: .3s;
    background-color: rgb(0, 173, 38);
    box-shadow: 0 2px 24px #00000057;
;}

.create_icon{
    position: absolute;
    display: block;
    top: 28%;
    left: 91%;
    z-index: 1;
    height: 47px;
    width: 149px;
    border-radius: 16px;
    background-color: rgb(13, 154, 0);
    transition: .5s;
    cursor: pointer;
    text-align: center;
}

.create_icon:hover{
    background-color: rgb(0, 218, 0);
transition: .5s;
}




.refresh_icon{
    position: absolute;
    display: block;
    left: 91%;
    top: 28%;
    z-index: 1;
    height: 47px;
    width: 149px;
    border-radius: 16px;
    background-color: rgb(0, 131, 207);
    transition: .5s;
    cursor: pointer;
    text-align: center;
}

.refresh_icon:hover{
    background-color: rgb(0, 186, 243);
transition: .5s;
}



.tooltip_breaker{
    position: relative;
    width: 100%;
    left: 0;
    height: 2px;
    top: -20;
    background-color: rgb(138, 138, 138);
    box-shadow: 0 5px 15px #868686;
}


.attribute-additions{
    position: relative;
    left: 10px;
    max-width: 450px;
    font-size: 14px;
    word-break: break-word;
}

.nodes{
    cursor: pointer;
}

.nodes:active{
    cursor: grab;
}


.Success_Message{
    background-color: rgba(134, 251, 98, 0.568);
    border-style: solid;
    border-width: 1px;
    border-radius: 5px;
    position: absolute;
    z-index: 1;
    top: 295px;
    height: 35px;
    left: 32%;
    box-shadow: 20px 5px 35px 5px rgba(3, 3, 3, 0.28);
    width: 750px;
	}

    </style>






<!-- User Interface / D3 Area instantiation     START     -->
<h4 style="position: absolute; left:50px; top:-2px; color:white; font-size:18px">Search</h4>
<h3 style="position: absolute; top: 4px; color: white; font-size: 18px; font-style: italic; font-weight: 100; right: 31px;">AXSI DATA EXPLORATION</h3>
<div style="display:inline-block; margin-right: auto; margin-left:auto;"><input id="inputsearch" type="text" class="input_search"><button id="submitQuery" class="button_search" style="float:right"><img src='search.png' id="submitQuery_Pic" style="height: 30px;"></button></div>


<select id="EnvironmentSelect" class="labelselectclass" style="    position: absolute; top: 14px; left: 1100px; width: 261px;" onchange="SelectEnvironment()">
<option value=0 checked=checked>Metadata Database</option>
<option value=1>Data Lineage Database</option>
<option value=2>UDD Database</option>
</select>


<h4 style="position: absolute; left:936px; top:-2px; color:white; font-size:18px">Database Select</h4>
<div id="headliner" class="headliner"></div>

<div id="create_icon" class="create_icon"><p style="color:white; font-weight:bolder; top: 0px; position:relative">Create Node</p></div>
<div id="refresh_icon" class="refresh_icon" style="left:82%"><p style="color:white; font-weight:bolder; position:relative;">Refresh Graph</p></div>


<div class="OptionBar">


    <div class='OptionBarOption' id="LegendOption"><br>Legend<img src='legend.png' style="height: 160px; position: absolute; left: 150; top: -1; cursor: pointer;"></div>
    <div class='OptionBarOption' id="GuidedOption"><br>Guided Query<img src='guided.png' style="height: 95px; position: absolute; left: 655px; top: 34px; cursor: pointer;"></div>
    <div class='OptionBarOption' id="SchemaOption"><br>Schema View<img src='schema.png' style="height: 127px; position: absolute; left: 1115px; top: 18px; cursor: pointer;"></div>
    <div class='OptionBarOption' id='CypherOption'><br>Cypher Query<img src='cypher.png' style="height: 127px; position: absolute; left: 1589px; top: 18px; cursor: pointer;"></div>



</div>

<div id="Success_Message" class="Success_Message" style="display: none;">
    <p style="color: rgb(0, 97, 32); font-weight: 800; text-align: center; position: relative; top:-10px">Changes successfully submitted! Visualization refreshed with data</p>
</div>



<svg id="D3_GRAPH_SVG"></svg>
<!-- User Interface / D3 Area instantiation      END      -->























<script>

    // Global Query Holder
    var globalQuery = []
    globalQuery.push('MATCH (n) RETURN n')

    // Global Solution
    



    // Global selection of environment on top of page
    var SelectEnvironment = function(){
        value = document.getElementById('EnvironmentSelect').value
        value = parseInt(value)
        EnvironmentSelected.push(value)
        d3.selectAll("svg > *").remove();
        Run_Schema_Graph('CALL db.schema.visualization()')
    }

    var RunRefresh = function(){
        d3.selectAll("svg > *").remove();
        try{
            Run_New_Graph(globalQuery[globalQuery.length-1])
            console.log('no valid history')
        } catch {
            console.log('defaulting to schema view')
            Run_Schema_Graph('CALL db.schema.visualization()')
        }
    }

        // Global Environment Wallet
        var EnvironmentSelected = [0]


        // Environment setup
        var Environment = [
            [{"URL":"http://cilsdbxd48819.silver.com"},{"BasicPass":"bmVvNGo6QXhTaV9zZXJ2aWNl"}],
            [{"URL":"http://cilsdbxd51192.silver.com"},{"BasicPass":"bmVvNGo6cGFzc3dvcmQ="}],
            [{"URL":"http://cilsdbxd49669.silver.com"},{"BasicPass":"bmVvNGo6cGFzc3dvcmQ="}]
        ]


        // Global Node Settings
        var node_default_size = 14
        var node_growth_size = 42





        // Global Colors
        var API_Color = '#2c8ef8'
        var Application_Color = '#6b5eae'
        var Component_Color = '#fa5c7c'
        var Database_Color = '#fd7e14'
        var Datasource_Color = '#ffbc00'
        var File_Color = '#0acf97'
        var Person_Color = '#02a8b5'
        var Project_Color = '#8391a2'
        var Reports_Color = '#e3eaef'
        var Table_Color = '#464f5b'
        



        // Global Placeholders
        var NeoData = new Array()
        var Neo_Nodes = new Array()
        var Neo_Rels = new Array()


        // TEST
        var attrcheck = []
        var ExportData = []
        var ax_data = []























































document.getElementById('refresh_icon').addEventListener('click',function(){
    RunRefresh();
})
























document.getElementById('create_icon').addEventListener('click',function(){


                    // Create window
                    var window = document.createElement('div')
                    window.setAttribute('class','CypherOptionWindowFrame')
                    window.setAttribute('style','display:none')
                    window.setAttribute('id','NewNodeWindow')
                    $(window).fadeIn(500);
                    document.body.appendChild(window)


                    // second windw
                    var secondwindow = document.createElement('div')
                    secondwindow.setAttribute('class','CypherOptionWindow')
                    window.appendChild(secondwindow)

                    // Title
                    var NewTitle = document.createElement('h2')
                    NewTitle.innerText = "Create New Node"
                    NewTitle.setAttribute('style',"padding-top:40px; text-align:center")
                    secondwindow.appendChild(NewTitle)


                    // Intro
                    var NewIntro = document.createElement('h5')
                    NewIntro.innerText='Fill in the appropriate attributes for your new node.\nPlease be sure this node doesnt exist already before creating. More attributes can be added to this node after creating it.'
                    NewIntro.setAttribute('style',"text-align:center")
                    secondwindow.appendChild(NewIntro)

                    // Name Input
                    var NewNodeName = document.createElement('input')
                    NewNodeName.setAttribute('type','text')
                    NewNodeName.setAttribute('id','New_node_name')
                    NewNodeName.setAttribute('class','labelselectClass')
                    NewNodeName.setAttribute('style','width: 300px; top: 50px; left: 120px;')
                    secondwindow.appendChild(NewNodeName)

                    var NewNodeNameLabel = document.createElement('h4')
                    NewNodeNameLabel.innerText='Name'
                    NewNodeNameLabel.setAttribute('style','left: 31px; position: relative; width:1px')
                    secondwindow.appendChild(NewNodeNameLabel)


                    
                    // Attribute Value Input
                    var NewNodeLabel = document.createElement('input')
                    NewNodeLabel.setAttribute('type','textarea')
                    NewNodeLabel.setAttribute('id','New_node_label')
                    NewNodeLabel.setAttribute('class','labelselectClass')
                    NewNodeLabel.setAttribute('style','width: 300px; top: 30px; left: 119px; text-align: left; text-indent: 15px;')
                    secondwindow.appendChild(NewNodeLabel)

                    var NewNodeLabelLabel = document.createElement('h4')
                    NewNodeLabelLabel.innerText='Label'
                    NewNodeLabelLabel.setAttribute('style','left: 50; position: relative; top:-20px; width:1px')
                    secondwindow.appendChild(NewNodeLabelLabel)

                    // Create Excecution of element

                    var New_Node_Submit_Button = document.createElement('button')
                    New_Node_Submit_Button.setAttribute('class','cyphersubmit')
                    New_Node_Submit_Button.setAttribute('style','top:370px')
                    New_Node_Submit_Button.innerText='Submit'
                    secondwindow.appendChild(New_Node_Submit_Button)
                    New_Node_Submit_Button.addEventListener('click',function(){
                                                                        var node_name = document.getElementById('New_node_name').value
                                                                        node_name = node_name.replace(/'/g, "");
                                                                        node_name = node_name.replace(/"/g, "");
                                                                        node_name = node_name.replace(/[()]/g, ''); 
                                                                        var node_label = document.getElementById('New_node_label').value
                                                                        // node_label = node_label.toLowerCase()
                                                                        node_label = node_label.replace(/ /g, "_")
                                                                        node_label = node_label.replace(/"/g, "");
                                                                        node_label = node_label.replace(/"/g, "");
                                                                        node_label = node_label.replace(/[()]/g, ''); 
                                                                        // node_label = capFirstLetter(node_label)
                                                                        //CREATE (n:Person { name: 'Andy', title: 'Developer' })
                                                                        var query = 'CREATE (n:'+node_label+"{ name : '"+node_name+"'})"
                                                                        var thequery = JSON.stringify({"statements":[{"statement":query}]});

                                                                        NEWxhr = new XMLHttpRequest;
                                                                        var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                var URL = Environment[selector][0].URL
                                                                                var PASS = Environment[selector][1].BasicPass

                                                                        NEWxhr.open("POST", URL+":7474/db/data/transaction/commit");
                                                                        ///db/neo4j/tx
                                                                        NEWxhr.setRequestHeader("Content-Type", "application/json");
                                                                        NEWxhr.setRequestHeader("Accept", "application/json");
                                                                        NEWxhr.setRequestHeader("Authorization", "Basic "+PASS);
                                                                        NEWxhr.withCredentials = false;
                                                                        NEWxhr.send(thequery);
                                                                        
                                                                    // API call event listener for successful call
                                                                        NEWxhr.addEventListener("readystatechange", function() {
                                                                                        
                                                                                    if(this.readyState === 4) { 

                                                                                        $( "#exit_tooltip_new" ).click();
                                                                                        console.log(this.responseText)
                                                                                        d3.selectAll("svg > *").remove();
                                                                                        try{Run_New_Graph(globalQuery[globalQuery.length-1])} catch{ try{Run_Schema_Graph('CALL db.schema.visualization()')}catch{console.log("Inner works :)")}}
                                                                                        //Run_Schema_Graph('CALL db.schema.visualization()')
                                                                                        

                                                                                        try {removeElement('EditWindow')
                                                                                        $(secondwindow).animate({left: '-100%'}, "slow")
                                                                                        $(window).fadeOut(800);
                                                                                    } catch {console.log('no need, exit click worked')}
                                                                                        $('#Success_Message').fadeIn()
                                                                                        setTimeout(function(){$('#Success_Message').fadeOut()},6000)




                                                                                    } else {
                                                                                        console.log('This query didnt work!')}

                                                                                        

                                                                                    }//function end
                                                                        )//XHR event listerner
                                                                        
                        
                    }) // End of submit button event listener
                    
            var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            exit.setAttribute('id','exit_tooltip_new')
            secondwindow.appendChild(exit)
            exit.addEventListener('click',function(){// start instantiation exit event
            try{
                removeElement('NewNodeWindow')
                }   catch{
                    console.log('no good')
                }          

                $(window).fadeOut(700)
                $(secondwindow).animate({left: '-97%'}, "slow")}) // exit instantiation


}) // End of Create Event Listener

















































































































document.getElementById('GuidedOption').addEventListener('click',function(){

    var window = document.createElement('div')
    window.setAttribute('class','CypherOptionWindowFrame')
    window.setAttribute('style','display:none')
    $(window).fadeIn(500);
    document.body.appendChild(window)

    var guideWindow = document.createElement('div')
    guideWindow.setAttribute('class','GuidedOptionWindow')
    window.appendChild(guideWindow)

    guideOptionbar = document.createElement('div')
    guideOptionbar.setAttribute('class','GuidedOptionBar')
    guideWindow.appendChild(guideOptionbar)



    var instructions = document.createElement('h3')
    instructions.innerText = 'Select the type of query you want to craft'
    guideWindow.appendChild(instructions)
    instructions.setAttribute('style','    position: absolute;  left: 534px;    top: 20;')
  



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


        // Shortest Path
        var shortestPathopt = document.createElement('div')
        shortestPathopt.setAttribute('class','GuidedOptionBarOption')
        shortestPathopt.innerText="Shortest Path"
        

        var shortestdesc = document.createElement('p')
        shortestdesc.innerText='Find the shortest possible path\n between any two identified nodes'
        shortestdesc.setAttribute('style','position: absolute; bottom: 5px; left: 212px; text-align: center;')
        shortestPathopt.appendChild(shortestdesc)

        var shortestimg = document.createElement('img')
        shortestimg.setAttribute('src',"shortest.png")
        shortestimg.setAttribute('style','height: 228px; display: block; margin: 0; position: absolute; left: 214px; top: 32px;')
        shortestPathopt.appendChild(shortestimg)
        guideOptionbar.appendChild(shortestPathopt)

        shortest_array =[]


        //Shortest event listener
        shortestPathopt.addEventListener('click',function(){

            guideWindow.innerHTML = ''

            var title = document.createElement('h1')
            title.innerText="Select your nodes"
            title.setAttribute('style','padding:5px; text-align:center')
            guideWindow.appendChild(title)


            //Create innder window

            var allnode_listA = document.createElement('select')
            allnode_listA.setAttribute('class','labelselectclass')
            allnode_listA.setAttribute('style','left: 195px; position:relative')
            allnode_listA.setAttribute('id','StartingNodeInput_ShortestPath')
            var allnode_listB = document.createElement('select')
            allnode_listB.setAttribute('class','labelselectclass')
            allnode_listB.setAttribute('style','left: 319px; position:relative')
            allnode_listB.setAttribute('id','EndingNodeInput_ShortestPath')
            guideWindow.appendChild(allnode_listA)
            guideWindow.appendChild(allnode_listB)



            // Instantiate API call
            var xhr = new XMLHttpRequest();
            xhr.withCredentials = false;
            var dataz = JSON.stringify({"statements":[{"statement":"Match (n) return n", "resultDataContents" : [ "row", "graph" ]}]});
            var xhrenvironment = EnvironmentSelected[EnvironmentSelected.length-1]
            var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
            xhr.open("POST", URL+":7474/db/neo4j/tx");
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.setRequestHeader("Accept", "application/json");
            xhr.setRequestHeader("Authorization", "Basic "+PASS);
            xhr.send(dataz);
            // API call event listener for successful call
            xhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {

                                    // Placeholders for data
                                    var NeoData = new Array()
                                    var Neo_Nodes = new Array()
                                    var Neo_Rels = new Array()

                                    // Capture response
                                    var data = JSON.parse(this.responseText)
                                    console.log(data)

                                    // Loop through response to format data into appropriate structure, saved as JSON
                                    for (i=0; i<data.results[0].data.length; i++){
                                        
                                                    // Nodes Loop
                                                    var data_temp_nodes = data.results[0].data[i].graph.nodes
                                                    console.log(data_temp_nodes)
                                                            for (j=0; j<data_temp_nodes.length; j++){
                                                                var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'", "name":"'+data_temp_nodes[j].properties.name+'"}'
                                                                var node = JSON.parse(node)
                                                                Neo_Nodes.push(node)
                                                            }

                                                    // Links loop
                                                    var data_temp_rels = data.results[0].data[i].graph.relationships
                                                    console.log(data_temp_rels)
                                                            for (k=0; k<data_temp_rels.length; k++){
                                                                var rel = '{"source":"'+ data_temp_rels[k].startNode +'", "target":"'+data_temp_rels[k].endNode+'", "relname":"'+data_temp_rels[k].type+'"}'
                                                                var rel = JSON.parse(rel)
                                                                Neo_Rels.push(rel)
                                                            }

                                    } // End of format response loop


                                    // Assign formatted data to data placeholders
                                    var Neo_Nodes = [...new Set(Neo_Nodes.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));
                                    var Neo_Rels = [...new Set(Neo_Rels.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));


                                    // Assign placeholders to single, graphable object
                                    var graph = []
                                    graph.nodes= Neo_Nodes
                                    graph.links= Neo_Rels
                                    
                                    for (A=0; A<graph.nodes.length; A++){

                                        
                                        var element = document.createElement('option')
                                        element.setAttribute('name','allclass_A')
                                        element.setAttribute('value',graph.nodes[A].id)
                                        element.innerText=graph.nodes[A].name +"  -  "+graph.nodes[A].label
                                        element.identifier = graph.nodes[A].id
                                        allnode_listA.appendChild(element)

                                    }


            }
            else {console.log('UNSUCESSFULCALL')}

            }) // end of START API call





            // Instantiate END NODE API call
            var ENDxhr = new XMLHttpRequest();
            ENDxhr.withCredentials = false;
            var dataz = JSON.stringify({"statements":[{"statement":"Match (n) return n", "resultDataContents" : [ "row", "graph" ]}]});
            var xhrenvironment = EnvironmentSelected[EnvironmentSelected.length-1]
            var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
            ENDxhr.open("POST", URL+":7474/db/neo4j/tx");
            ENDxhr.setRequestHeader("Content-Type", "application/json");
            ENDxhr.setRequestHeader("Accept", "application/json");
            ENDxhr.setRequestHeader("Authorization", "Basic "+PASS);;
            ENDxhr.send(dataz);
            // API call event listener for successful call
            ENDxhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {

                                    // Placeholders for data
                                    var NeoData = new Array()
                                    var Neo_Nodes = new Array()
                                    var Neo_Rels = new Array()

                                    // Capture response
                                    var data = JSON.parse(this.responseText)
                                    console.log(data)

                                    // Loop through response to format data into appropriate structure, saved as JSON
                                    for (i=0; i<data.results[0].data.length; i++){
                                        
                                                    // Nodes Loop
                                                    var data_temp_nodes = data.results[0].data[i].graph.nodes
                                                            for (j=0; j<data_temp_nodes.length; j++){
                                                                var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'", "name":"'+data_temp_nodes[j].properties.name+'"}'
                                                                var node = JSON.parse(node)
                                                                Neo_Nodes.push(node)
                                                            }

                                                    // Links loop
                                                    var data_temp_rels = data.results[0].data[i].graph.relationships
                                                            for (k=0; k<data_temp_rels.length; k++){
                                                                var rel = '{"source":"'+ data_temp_rels[k].startNode +'", "target":"'+data_temp_rels[k].endNode+'", "relname":"'+data_temp_rels[k].type+'"}'
                                                                var rel = JSON.parse(rel)
                                                                Neo_Rels.push(rel)
                                                            }

                                    } // End of format response loop


                                    // Assign formatted data to data placeholders
                                    var Neo_Nodes = [...new Set(Neo_Nodes.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));
                                    var Neo_Rels = [...new Set(Neo_Rels.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));


                                    // Assign placeholders to single, graphable object
                                    var graph = []
                                    graph.nodes= Neo_Nodes
                                    graph.links= Neo_Rels
                                    
                                    for (A=0; A<graph.nodes.length; A++){

                                        var element = document.createElement('option')
                                        element.setAttribute('name','allclass_B')
                                        
                                        element.setAttribute('value',graph.nodes[A].id)
                                        element.innerText=graph.nodes[A].name +"  -  "+graph.nodes[A].label
                                        element.identifier = graph.nodes[A].id
                                        
                                        allnode_listB.appendChild(element)

                                    }


            }
            else {console.log('UNSUCCESFUL2')}

            }) // end of good API call



            var calculateButton = document.createElement('button')
            guideWindow.appendChild(calculateButton)
            calculateButton.innerText='Execute query'
            calculateButton.setAttribute('class','calculatebutton')

            calculateButton.addEventListener('click',function(){
               var starting_id =  document.getElementById('StartingNodeInput_ShortestPath').value
               var ending_id =  document.getElementById('EndingNodeInput_ShortestPath').value
               removeElement('StartingNodeInput_ShortestPath')
                removeElement('EndingNodeInput_ShortestPath')
               //MATCH (martin:RoadNode),(oliver:RoadNode), p = shortestPath((martin)-[*..15]-(oliver))  WHERE id(martin) = 16814 AND id(oliver) = 16820 RETURN p
               query = 'MATCH (n),(m), p= shortestPath((n)-[*..15]-(m)) WHERE id(n) = '+ starting_id + ' AND id(m) = '+ending_id+ ' RETURN n,p,m'
               d3.selectAll("svg > *").remove();
               $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")

                try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                globalQuery.push(query)
                Run_New_Graph(query)
            })


            var starTitle = document.createElement('h4')
            starTitle.innerText='Starting Node'
            starTitle.setAttribute('style','position:absolute; top: 150px; left: 363px;')
            guideWindow.appendChild(starTitle)

            var endTitle = document.createElement('h4')
            endTitle.innerText= 'Ending Node'
            endTitle.setAttribute('style','position: absolute;top: 150; left: 970;')
            guideWindow.appendChild(endTitle)






            

            var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            guideWindow.appendChild(exit)
            exit.addEventListener('click',function(){// start instantiation exit event
            try{               removeElement('StartingNodeInput_ShortestPath')
                removeElement('EndingNodeInput_ShortestPath')}   catch{
                    console.log('no good')
                }          

                $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")}) // exit instantiation

            searchMethod = document.createElement('div')




        }) // End of Shortest Event listener








// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





        //Degrees of sep

        var degsepOpt = document.createElement('div')
        degsepOpt.setAttribute('class','GuidedOptionBarOption')
        degsepOpt.innerText="Guided Search"

        var degsepimg = document.createElement('img')
        degsepimg.setAttribute('src',"degsep.png")
        degsepimg.setAttribute('style','height: 180px; display: block; margin: 0; position: absolute; left: 888px; top: 64px;')
        degsepOpt.appendChild(degsepimg)
        guideOptionbar.appendChild(degsepOpt)


        var depsepdesc = document.createElement('p')
        depsepdesc.setAttribute('style','position: absolute; bottom: 5px; left: 840; text-align: center;')
        depsepdesc.innerText='\n\n\n\nDiscover nodes freestyle by relationship/label \n as well as calculating the degree of distance between them.'
        degsepOpt.appendChild(depsepdesc)












        // Degree of separation

        degsepOpt.addEventListener('click',function(){
            guideWindow.innerHTML = ''


            

            var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            guideWindow.appendChild(exit)
            exit.addEventListener('click',function(){
                $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")        }) // exit instantiation

            searchMethod = document.createElement('div')
            guideWindow.appendChild(searchMethod)
            var title = document.createElement('h1')
            title.innerText="Select one of the above options to begin"
            title.setAttribute('style','padding:5px; text-align:center')
            guideWindow.appendChild(title)

                    searchLabel = document.createElement('input')
                    searchLabel.setAttribute('type','radio')
                    searchLabel.setAttribute('id','searchLabel')
                    searchLabel.setAttribute('value','searchLabel')
                    searchLabel.setAttribute('name','startList')
                    searchLabel.setAttribute('style','margin-left: 369px; margin-top: 28px;')
                    LsearchLabel = document.createElement('label')
                    LsearchLabel.setAttribute('for','searchLabel')
                    LsearchLabel.setAttribute('style','margin-right: 20px;')
                    LsearchLabel.innerText='Search by node type'
                    searchMethod.appendChild(searchLabel)
                    searchMethod.appendChild(LsearchLabel)
                    searchLabel.addEventListener('click',function(){createLabelSearch()})

                    searchRel = document.createElement('input')
                    searchRel.setAttribute('type','radio')
                    searchRel.setAttribute('id','searchRel')
                    searchRel.setAttribute('value','searchRel')
                    searchRel.setAttribute('name','startList')
                    searchRel.setAttribute('style','margin-left:50px;')
                    LsearchRel = document.createElement('label')
                    LsearchRel.setAttribute('for','searchRel')
                    LsearchRel.innerText='Search by relationships'
                    LsearchRel.setAttribute('style','margin-right: 20px;')
                    searchMethod.appendChild(searchRel)
                    searchMethod.appendChild(LsearchRel)
                    searchRel.addEventListener('click',function(){createRelSearch()})

                    searchAttr = document.createElement('input')
                    searchAttr.setAttribute('type','radio')
                    searchAttr.setAttribute('id','searchAttr')
                    searchAttr.setAttribute('value','searchAttr')
                    searchAttr.setAttribute('name','startList')
                    searchAttr.setAttribute('style','margin-left:50px;')
                    LsearchAttr = document.createElement('label')
                    LsearchAttr.setAttribute('for','searchAttr')
                    LsearchAttr.setAttribute('style','margin-right: 20px;')
                    LsearchAttr.innerText='Search by node attribute'
                    searchMethod.appendChild(searchAttr)
                    searchMethod.appendChild(LsearchAttr)
                    searchAttr.addEventListener('click',function(){createAttrSearch()})





                var createAttrSearch = function(){

                    guideWindow.innerHTML=''



                    searchMethod = document.createElement('div')
            guideWindow.appendChild(searchMethod)

                    searchLabel = document.createElement('input')
                    searchLabel.setAttribute('type','radio')
                    searchLabel.setAttribute('id','searchLabel')
                    searchLabel.setAttribute('value','searchLabel')
                    searchLabel.setAttribute('name','startList')
                    searchLabel.setAttribute('style','margin-left: 369px; margin-top: 28px;')
                    LsearchLabel = document.createElement('label')
                    LsearchLabel.setAttribute('for','searchLabel')
                    LsearchLabel.setAttribute('style','margin-right: 20px;')
                    LsearchLabel.innerText='Search by node type'
                    searchMethod.appendChild(searchLabel)
                    searchMethod.appendChild(LsearchLabel)
                    searchLabel.addEventListener('click',function(){createLabelSearch()})

                    searchRel = document.createElement('input')
                    searchRel.setAttribute('type','radio')
                    searchRel.setAttribute('id','searchRel')
                    searchRel.setAttribute('value','searchRel')
                    searchRel.setAttribute('name','startList')
                    searchRel.setAttribute('style','margin-left:50px;')
                    LsearchRel = document.createElement('label')
                    LsearchRel.setAttribute('for','searchRel')
                    LsearchRel.innerText='Search by relationships'
                    LsearchRel.setAttribute('style','margin-right: 20px;')
                    searchMethod.appendChild(searchRel)
                    searchMethod.appendChild(LsearchRel)
                    searchRel.addEventListener('click',function(){createRelSearch()})

                    searchAttr = document.createElement('input')
                    searchAttr.setAttribute('type','radio')
                    searchAttr.setAttribute('id','searchAttr')
                    searchAttr.setAttribute('value','searchAttr')
                    searchAttr.setAttribute('name','startList')
                    searchAttr.setAttribute('style','margin-left:50px;')
                    searchAttr.setAttribute('checked','checked')
                    LsearchAttr = document.createElement('label')
                    LsearchAttr.setAttribute('for','searchAttr')
                    LsearchAttr.setAttribute('style','margin-right: 20px;')
                    LsearchAttr.innerText='Search by node attribute'
                    searchMethod.appendChild(searchAttr)
                    searchMethod.appendChild(LsearchAttr)
                    searchAttr.addEventListener('click',function(){createAttrSearch()})






                var title = document.createElement('h1')
                title.innerText="Select an attribute and enter your query"
                title.setAttribute('style','padding:5px; text-align:center')
                guideWindow.appendChild(title)

                var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            guideWindow.appendChild(exit)
            exit.addEventListener('click',function(){// start instantiation exit event
                $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")}) // exit instantiation


                var attributes = document.createElement('select')
                attributes.setAttribute('class','labelselectclass')
                attributes.setAttribute('id','attr_drop')
                guideWindow.appendChild(attributes)

                var textinput = document.createElement('input')
                textinput.setAttribute('type','text')
                textinput.setAttribute('class','labelselectclass')
                textinput.setAttribute('style','left:428px')
                textinput.setAttribute('id','attr_search')
                guideWindow.appendChild(textinput)

                var desc = document.createElement('p')
                desc.innerText='EQUALS'
                desc.setAttribute('style','position:absolute; top: 228px; left: 670px;')
                guideWindow.appendChild(desc)


                var button = document.createElement('button')
                   button.setAttribute('style','position: absolute; width: 475;left: 460; top: 400; font-size:16px')
                   button.innerText='Show me nodes with this attribute value'
                   button.setAttribute('class','calculatebutton')
                   guideWindow.appendChild(button)
                                button.addEventListener('click',function(){
                                    
                                    var attr = document.getElementById('attr_drop').value
                                    var text =  document.getElementById('attr_search').value;
                                    
                                   
                                    var query = "Match (n)-[p]-(m) where n."+attr+" =~'(?i).*"+text+".*' return n,p,m"
                                    d3.selectAll("svg > *").remove();
                                    $(window).fadeOut(700)
                                    $(guideWindow).animate({left: '-97%'}, "slow")
                                    try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                    globalQuery.push(query)
                                    Run_New_Graph(query)
                                    removeElement('attr_drop')
                                    removeElement('attr_search')
                                })



                

            // Instantiate END NODE API call
            var attrxhr = new XMLHttpRequest();
            attrxhr.withCredentials = false;
            var dataz = JSON.stringify({"statements":[{"statement":"match(n) return distinct(keys(n))", "resultDataContents" : [ "row", "graph" ]}]});
            var xhrenvironment = EnvironmentSelected[EnvironmentSelected.length-1]
            var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
            attrxhr.open("POST", URL+":7474/db/neo4j/tx");
            attrxhr.setRequestHeader("Content-Type", "application/json");
            attrxhr.setRequestHeader("Accept", "application/json");
            attrxhr.setRequestHeader("Authorization", "Basic "+PASS);
            attrxhr.send(dataz);
            // API call event listener for successful call
            attrxhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
                
                var data = JSON.parse(this.responseText)
                





                function onlyUnique(value, index, self) { 
                    // JSONOBJECT.filter( onlyUnique )
                    return self.indexOf(value) === index;
                }

                for (N = 0; N<data.results[0].data.length; N++){

                    for (BK = 0; BK<data.results[0].data[N].row.length; BK++){
                    var unique = data.results[0].data[N].row[BK].filter( onlyUnique );
                    attrcheck.push(data.results[0].data[N].row[BK])
                    qheck = attrcheck.filter( onlyUnique )

                }
                }
                var A = [];
                for (i=0; i<attrcheck.length; i++){for (j=0; j<attrcheck[i].length; j++){A.push(attrcheck[i][j])}}

                var unique = A.filter( onlyUnique )

                for (AA=0; AA<unique.length; AA++){
                    var element = document.createElement('option')
                    element.setAttribute('name','attr_select')
                    element.setAttribute('value',unique[AA])
                    element.innerText=unique[AA]
                    attributes.appendChild(element)
                }


            


            } 
            else {
                console.log('bad API call!')
            }
            }) // end of API call checks



                    
                } // End of ATTRsearch


















            var createRelSearch = function() {
                guideWindow.innerHTML=''




                searchMethod = document.createElement('div')
            guideWindow.appendChild(searchMethod)

                    searchLabel = document.createElement('input')
                    searchLabel.setAttribute('type','radio')
                    searchLabel.setAttribute('id','searchLabel')
                    searchLabel.setAttribute('value','searchLabel')
                    searchLabel.setAttribute('name','startList')
                    searchLabel.setAttribute('style','margin-left: 369px; margin-top: 28px;')
                    LsearchLabel = document.createElement('label')
                    LsearchLabel.setAttribute('for','searchLabel')
                    LsearchLabel.setAttribute('style','margin-right: 20px;')
                    LsearchLabel.innerText='Search by node type'
                    searchMethod.appendChild(searchLabel)
                    searchMethod.appendChild(LsearchLabel)
                    searchLabel.addEventListener('click',function(){createLabelSearch()})

                    searchRel = document.createElement('input')
                    searchRel.setAttribute('type','radio')
                    searchRel.setAttribute('id','searchRel')
                    searchRel.setAttribute('value','searchRel')
                    searchRel.setAttribute('name','startList')
                    searchRel.setAttribute('style','margin-left:50px;')
                    searchRel.setAttribute('checked','checked')
                    LsearchRel = document.createElement('label')
                    LsearchRel.setAttribute('for','searchRel')
                    LsearchRel.innerText='Search by relationships'
                    LsearchRel.setAttribute('style','margin-right: 20px;')
                    searchMethod.appendChild(searchRel)
                    searchMethod.appendChild(LsearchRel)
                    searchRel.addEventListener('click',function(){createRelSearch()})

                    searchAttr = document.createElement('input')
                    searchAttr.setAttribute('type','radio')
                    searchAttr.setAttribute('id','searchAttr')
                    searchAttr.setAttribute('value','searchAttr')
                    searchAttr.setAttribute('name','startList')
                    searchAttr.setAttribute('style','margin-left:50px;')
                    LsearchAttr = document.createElement('label')
                    LsearchAttr.setAttribute('for','searchAttr')
                    LsearchAttr.setAttribute('style','margin-right: 20px;')
                    LsearchAttr.innerText='Search by node attribute'
                    searchMethod.appendChild(searchAttr)
                    searchMethod.appendChild(LsearchAttr)
                    searchAttr.addEventListener('click',function(){createAttrSearch()})







                var title = document.createElement('h1')
                title.innerText="Select relationship type to query for nodes"
                title.setAttribute('style','padding:5px; text-align:center')
                guideWindow.appendChild(title)

                var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            guideWindow.appendChild(exit)
            exit.addEventListener('click',function(){// start instantiation exit event
                $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")}) // exit instantiation

            searchMethod = document.createElement('div')


                // select
                relSelect = document.createElement('select')
                relSelect.setAttribute('id','relSelector')
                guideWindow.appendChild(relSelect)
                relSelect.setAttribute('class','labelselectclass')
                relSelect.setAttribute('style','top: 145px; left: 169px;')

                   var rel =  document.getElementById('relSelector').value;

                   var button = document.createElement('button')
                   button.setAttribute('style','position: absolute; width: 475;left: 800; top: 251; font-size:16px')
                   button.innerText='Show me nodes connected by this relationship'
                   button.setAttribute('class','calculatebutton')
                   guideWindow.appendChild(button)
                                button.addEventListener('click',function(){
                                    
                                    var rel =  document.getElementById('relSelector').value;
                                    
                                    
                                    var query = "Match (n)-[p:"+rel+"]-(m) return n,p,m"
                                    d3.selectAll("svg > *").remove();
                                    $(window).fadeOut(700)
                                    $(guideWindow).animate({left: '-97%'}, "slow")
                                    try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                    globalQuery.push(query)
                                    Run_New_Graph(query)
                                    removeElement('relSelector')
                                })


                

                
                


                

                

            // Instantiate END NODE API call
            var ENDxhr = new XMLHttpRequest();
            ENDxhr.withCredentials = false;
            var dataz = JSON.stringify({"statements":[{"statement":"match (n)-[r]-() return distinct type(r)", "resultDataContents" : [ "row", "graph" ]}]});
            var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
            ENDxhr.open("POST", URL+":7474/db/neo4j/tx");
            ENDxhr.setRequestHeader("Content-Type", "application/json");
            ENDxhr.setRequestHeader("Accept", "application/json");
            ENDxhr.setRequestHeader("Authorization", "Basic "+PASS);
            ENDxhr.send(dataz);
            // API call event listener for successful call
            ENDxhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {
                
                var data = JSON.parse(this.responseText)
               
                attrcheck.push(data)

                for (JL=0; JL<data.results[0].data.length; JL++){
                var relname = data.results[0].data[JL].row
                var option = document.createElement('option')
                option.innerText=relname
                option.setAttribute('value',relname)
                option.setAttribute('name','RelNames')
                relSelect.appendChild(option)

                }

            } 
            else {
                console.log('bad API call!')
            }
            }) // end of API call checks
                
        
            } ///End  of of Rel search











            var createLabelSearch = function(){
                guideWindow.innerHTML=''
                searchMethod = document.createElement('div')
            guideWindow.appendChild(searchMethod)

                    searchLabel = document.createElement('input')
                    searchLabel.setAttribute('type','radio')
                    searchLabel.setAttribute('id','searchLabel')
                    searchLabel.setAttribute('value','searchLabel')
                    searchLabel.setAttribute('name','startList')
                    searchLabel.setAttribute('style','margin-left: 369px; margin-top: 28px;')
                    searchLabel.setAttribute('checked','checked')
                    LsearchLabel = document.createElement('label')
                    LsearchLabel.setAttribute('for','searchLabel')
                    LsearchLabel.setAttribute('style','margin-right: 20px;')
                    LsearchLabel.innerText='Search by node type'
                    searchMethod.appendChild(searchLabel)
                    searchMethod.appendChild(LsearchLabel)
                    searchLabel.addEventListener('click',function(){createLabelSearch()})

                    searchRel = document.createElement('input')
                    searchRel.setAttribute('type','radio')
                    searchRel.setAttribute('id','searchRel')
                    searchRel.setAttribute('value','searchRel')
                    searchRel.setAttribute('name','startList')
                    searchRel.setAttribute('style','margin-left:50px;')
                    LsearchRel = document.createElement('label')
                    LsearchRel.setAttribute('for','searchRel')
                    LsearchRel.innerText='Search by relationships'
                    LsearchRel.setAttribute('style','margin-right: 20px;')
                    searchMethod.appendChild(searchRel)
                    searchMethod.appendChild(LsearchRel)
                    searchRel.addEventListener('click',function(){createRelSearch()})

                    searchAttr = document.createElement('input')
                    searchAttr.setAttribute('type','radio')
                    searchAttr.setAttribute('id','searchAttr')
                    searchAttr.setAttribute('value','searchAttr')
                    searchAttr.setAttribute('name','startList')
                    searchAttr.setAttribute('style','margin-left:50px;')
                    LsearchAttr = document.createElement('label')
                    LsearchAttr.setAttribute('for','searchAttr')
                    LsearchAttr.setAttribute('style','margin-right: 20px;')
                    LsearchAttr.innerText='Search by node attribute'
                    searchMethod.appendChild(searchAttr)
                    searchMethod.appendChild(LsearchAttr)
                    searchAttr.addEventListener('click',function(){createAttrSearch()})





                var title = document.createElement('h1')
                title.innerText="Select a node category to view"
                title.setAttribute('style','padding:5px; text-align:center')
                guideWindow.appendChild(title)

            //labels = ["API",'Application','Component','Database','Datasource','File','Person','Project','Reports','Table']

           var labelquery = "match(n) return distinct(labels(n))"
           var labelquerydata = JSON.stringify({"statements":[{"statement":labelquery, "resultDataContents" : ["row","graph" ]}]});

           var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
            var labelxhr = new XMLHttpRequest
            labelxhr.open("POST", URL+":7474/db/neo4j/tx");
            labelxhr.setRequestHeader("Content-Type", "application/json");
            labelxhr.setRequestHeader("Accept", "application/json");
            labelxhr.setRequestHeader("Authorization", "Basic "+PASS);

            // API call event listener for successful call
            labelxhr.addEventListener("readystatechange", function() {
            if(this.readyState === 4) {

                var data = JSON.parse(this.responseText)       
            labels = data.results[0].data
            var labelselect = document.createElement('select')
            labelselect.setAttribute('class','labelselectClass')
            labelselect.setAttribute('id','labelselector')
            labelselect.setAttribute('style','    top: 150px; left: 150px;')
            guideWindow.appendChild(labelselect)
            for (lb=0; lb<labels.length; lb++){
                label_name = labels[lb].row[0]
                var option = document.createElement('option')
                option.innerText = label_name;
                option.value = label_name
                labelselect.appendChild(option)
            }

            }})

            labelxhr.send(labelquerydata);







            var button = document.createElement('button')
                   button.setAttribute('style','position: absolute; width: 475;left: 800; top: 251; font-size:16px')
                   button.innerText='Show me all nodes of this type and the relationships they have'
                   button.setAttribute('class','calculatebutton')
                   guideWindow.appendChild(button)
                                button.addEventListener('click',function(){
                                    
                                    var lab =  document.getElementById('labelselector').value;
                                    var query = "Match (n:"+lab+")-[p]-(m) return n,p,m"
                                    d3.selectAll("svg > *").remove();
                                    $(window).fadeOut(700)
                                    $(guideWindow).animate({left: '-97%'}, "slow")
                                    try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                    globalQuery.push(query)
                                    Run_New_Graph(query)
                                    removeElement('labelselector')
                                })

            

            
            var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            guideWindow.appendChild(exit)
            exit.addEventListener('click',function(){// start instantiation exit event
                $(window).fadeOut(700)
                $(guideWindow).animate({left: '-97%'}, "slow")}) // exit instantiation

            }



        }) // End of Degree Sep event listener



    


    var exit = document.createElement('div')
    exit.setAttribute('class','exit_button')
    guideWindow.appendChild(exit)
    exit.addEventListener('click',function(){
        $(window).fadeOut(700)
        $(guideWindow).animate({left: '-97%'}, "slow")

    })






})



































































document.getElementById('CypherOption').addEventListener('click',function(){

    // Create window
    var window = document.createElement('div')
    window.setAttribute('class','CypherOptionWindowFrame')
    window.setAttribute('style','display:none')
    $(window).fadeIn(500);
    document.body.appendChild(window)


    // second windw
    var secondwindow = document.createElement('div')
    secondwindow.setAttribute('class','CypherOptionWindow')
    window.appendChild(secondwindow)



    // Title
    var title = document.createElement('h1')
    title.setAttribute('class','cypherbartitle')
    title.innerText='Cypher Query Console'
    secondwindow.appendChild(title)

    var sub = document.createElement('p')
    sub.setAttribute('class','cypherbartitlesub')
    sub.innerText='Type your cypher queries below, the box will highlight green if valid'
    secondwindow.appendChild(sub)

    var error = document.createElement('p')
    error.setAttribute('class','cypherbartitleerror')
    secondwindow.appendChild(error)



    //Input Search Bar
    cypherbar = document.createElement('input')
    cypherbar.setAttribute('class','cypherbar')
    secondwindow.appendChild(cypherbar)

    cypherbar.addEventListener('input',function(){
        var query = cypherbar.value
    //Input search type event
    var dataexplain = JSON.stringify({"statements":[{"statement":'EXPLAIN '+query, "resultDataContents" : [ "row", "graph" ]}]});
    expxhr = new XMLHttpRequest;
    var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass

    expxhr.open("POST", URL+":7474/db/neo4j/tx");
    expxhr.setRequestHeader("Content-Type", "application/json");
    expxhr.setRequestHeader("Accept", "application/json");
    expxhr.setRequestHeader("Authorization", "Basic "+PASS);
    expxhr.withCredentials = false;
// API call event listener for successful call
    expxhr.addEventListener("readystatechange", function() {
    if(this.readyState === 4) {
                        
                        // Capture response
                        var data = JSON.parse(this.responseText)

                        

                        if (data.errors.length >=1){
                            try {removeElement('submitCypher')} catch{console.log('nobuttontormoeve')}
                            error.innerText = data.errors[0].code+'\n'+data.errors[0].message
                            cypherbar.setAttribute('class','cypherbar')
                            cypherbar.setAttribute('style','   box-shadow: 0 10px 25px #ff00002e; color:black;')
                        } else {
                            error.innerText=''
                            cypherbar.setAttribute('style','border-bottom-color: #00d400; box-shadow: 0 10px 45px #00a61d7a; color:green')
                            var submitbutton = document.createElement('button')
                            submitbutton.setAttribute('class','cyphersubmit')
                            submitbutton.setAttribute('id','submitCypher')
                            submitbutton.innerText='Create Graph'
                            secondwindow.appendChild(submitbutton)
                            submitbutton.addEventListener('click',function(){
                                d3.selectAll("svg > *").remove();
                                var query = cypherbar.value
                                try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                globalQuery.push(query)
                                Run_New_Graph(query)
                                removeElement('submitCypher')
                                $(secondwindow).animate({left: '-100%'}, "slow")
                                $(window).fadeOut(800);
                            })
                            
                        }


    } else {
        console.log('nogood!')}

        

    }//function end
    )//event lisetern end
    expxhr.send(dataexplain);


    })




    // Exit button
    var exit = document.createElement('div')
    exit.setAttribute('class','exit_button')
    secondwindow.appendChild(exit)
    exit.addEventListener('click',function(){
        $(secondwindow).animate({left: '-100%'}, "slow")
        $(window).fadeOut(800);
    // setTimeout(removeElement('tooltipper'),6000)
    })


})

































































// Given a query, create a network diagram
var Run_Schema_Graph = function(query){


// Insert query into API request letter
var dataz = JSON.stringify({"statements":[{"statement":query, "resultDataContents" : ["graph" ]}]});



// Instantiate API call
var xhr = new XMLHttpRequest();
xhr.withCredentials = false;
// API call event listener for successful call
xhr.addEventListener("readystatechange", function() {
if(this.readyState === 4) {

                        // Placeholders for data
                        var NeoData = new Array()
                        var Neo_Nodes = new Array()
                        var Neo_Rels = new Array()

                        // Capture response
                        var data = JSON.parse(this.responseText)

                        // Loop through response to format data into appropriate structure, saved as JSON
                        for (i=0; i<data.results[0].data.length; i++){
                            
                                        // Nodes Loop
                                        var data_temp_nodes = data.results[0].data[i].graph.nodes
                                                for (j=0; j<data_temp_nodes.length; j++){
                                                    var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'", "name":"'+data_temp_nodes[j].properties.name+'"}'
                                                    var node = JSON.parse(node)
                                                    Neo_Nodes.push(node)
                                                }

                                        // Links loop
                                        var data_temp_rels = data.results[0].data[i].graph.relationships
                                                for (k=0; k<data_temp_rels.length; k++){
                                                    var rel = '{"source":"'+ data_temp_rels[k].startNode +'", "target":"'+data_temp_rels[k].endNode+'", "relname":"'+data_temp_rels[k].type+'"}'
                                                    var rel = JSON.parse(rel)
                                                    Neo_Rels.push(rel)
                                                }

                        } // End of format response loop


                        // Assign formatted data to data placeholders
                        var Neo_Nodes = [...new Set(Neo_Nodes.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));
                        var Neo_Rels = [...new Set(Neo_Rels.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));


                        // Assign placeholders to single, graphable object
                        var graph = []
                        graph.nodes= Neo_Nodes
                        graph.links= Neo_Rels
                        ExportData.pop()
                        ExportData.push(graph)



                        // Create function to create D3 graph consistently across gathered data
                        function run(graph) {

                                            // Select SVG object to populate
                                            var svg = d3.select("svg"),

                                            // Grab SVG size attributes for D3 object interactivity
                                            //width = svg.attr("width"),
                                            //height = svg.attr("height");
                                            width = 1550
                                            height = 690
                                            


                                            // Create a force network simulation
                                            var simulation = d3.forceSimulation()
                                                .nodes(graph.nodes);                    


                                                


                                            // Assign attributes to simulation
                                            simulation
                                                .force("charge_force", d3.forceManyBody().strength(-170))    
                                                .force("center_force", d3.forceCenter(width/2,height/2))
                                                .force("links", d3.forceLink(graph.links).id(function (d) { return d.id; }))
                                                .force("links", d3.forceLink(graph.links).distance(175))            
                                                .force("collide", d3.forceCollide().radius(1))
                                                ;         


                                            // Assign tick function, which executes every millisecond (animation loop)
                                            simulation
                                                .on("tick", ticked);




                                            // Add encompassing group for the zoom 
                                            var g = svg.append("g")
                                                .attr("class", "everything");


                                            // Create definition for the arrow markers showing relationship directions
                                            g.append("defs").append("marker")
                                                .attr("id", "arrow")
                                                .attr("viewBox", "0 -3 10 10")
                                                .attr("refX", 20)
                                                .attr("refY", 0)
                                                .attr("markerWidth", 8)
                                                .attr("markerHeight", 8)
                                                .attr("orient", "auto")
                                                .append("svg:path")
                                                .attr("d", "M0,-5L10,0L0,5");        

                                            // Create Link objects
                                            var link = g.append("g")
                                                    .attr("class", "links")
                                                    .selectAll("line")
                                                    .data(graph.links)
                                                    .enter().append("line")
                                                    .attr("stroke", function(d) { return d3.color("#000000"); })
                                                    .style("stroke-width",'.5px')
                                                    .attr("marker-end", "url(#arrow)");

                                            // Create Node objects
                                            var node = g.append("g")
                                                .attr("class", "nodes")
                                                .selectAll("circle")
                                                .data(graph.nodes)
                                                .enter()
                                                .append("circle")
                                                .attr("r", node_default_size)
                                                .attr("fill", function(d) { 
                                                    // CONDITIONAL COLOR OF NODES START



                                                    if (d.label == 'API') {
                                                        return d3.color(API_Color)}
                                                    else if (d.label == 'Person'){
                                                        return d3.color(Person_Color)
                                                    }
                                                    else if (d.label == 'Application'){
                                                        return d3.color(Application_Color)
                                                    }
                                                    else if (d.label == 'Component'){
                                                        return d3.color(Component_Color)
                                                    }
                                                    else if (d.label == 'Datasource'){
                                                        return d3.color(Datasource_Color)
                                                    }
                                                    else if (d.label == 'Database'){
                                                        return d3.color(Database_Color)
                                                    }
                                                    else if (d.label == 'File'){
                                                        return d3.color(File_Color)
                                                    }
                                                    else if (d.label == 'Project'){
                                                        return d3.color(Project_Color)
                                                    }
                                                    else if (d.label == 'Reports'){
                                                        return d3.color(Reports_Color)
                                                    }
                                                    else if (d.label == 'Table'){
                                                        return d3.color(Table_Color)
                                                    }
                                                    else {
                                                    return d3.color("#ffbc00");
                                                        }

                                                     })
                                                    // CONDITIONAL COLOR OF NODES END




                                                .style("stroke", function(d) { 
                                                    // CONDITIONAL COLOR OF NODE OUTLINE START
                                                    if (d.sourceOnly) return d3.color("#000080");

                                                    return d3.color("#e2e2e2"); 
                                                    });
                                                    // CONDITIONAL COLOR OF NODE OUTLINE END




                                                // Create Node Labels
                                                var nodeText = g.append("g").attr("class", "labels").selectAll("g")
                                                    .data(graph.nodes)
                                                    .enter().append("g")
                                                    .append("text")
                                                    .attr("x", 14)
                                                    .attr("y", ".31em")
                                                    .style("font-family", "sans-serif")
                                                    .style('font-weight','bolder')
                                                    .style("font-size", "16px")
                                                    .text(function (d) { return d.name; });


                                                // Create Link Labels
                                                var linkText = g.append("g").attr("class", "labels").selectAll("g")
                                                    .data(graph.links)
                                                    .enter().append("text")
                                                    .attr("font-family", "Arial, Helvetica, sans-serif")
                                                    .attr("fill", "Black")
                                                    .style("font", "italic 10px Arial")
                                                    .attr("dx", ".75em");
                                                    //.text(function(d) { return d.relname; });


                                                link.append("title")
                                                .text(function (d) { return d.relname; });



                                                // Create drag capabilities  
                                                var drag_handler = d3.drag()
                                                    .on("start", drag_start)
                                                    .on("drag", drag_drag)
                                                    .on("end", drag_end);	
                                                drag_handler(node);


                                                // Node Click Function
                                                node.on("click", function (d) {

                                                    
                                                                                        try{ 
                                                                                        $( "#exit_tooltip" ).click();
                                                                                        removeElement('exit_tooltip')
                                                                                        } catch {console.log('no exist man')}

                                                                                        var default_color = d3.select(this).attr("fill")
                                                                                        var default_stroke = d3.select(this).attr("stroke")
                                                                                        

                                                                                        // change node size
                                                                                        d3.select(this).attr("r", node_growth_size);
                                                                                        element = d3.select(this)

                                                                                        // change node outline / color

                                                                                        d3.select(this).attr("fill","#000000ad")
                                                                                        d3.select(this).attr('stroke','#fb00ff')


                                                                                        // Tooltip Create
                                                                                        var tooltip = document.createElement('div')
                                                                                        // tooltip.setAttribute('style','top:'+window.mouseYPos+'px; left:'+window.mouseXPos+'px;')
                                                                                        tooltip.setAttribute('class','tooltip_class')
                                                                                        tooltip.setAttribute('id','tooltipper')
                                                                                        document.body.appendChild(tooltip)
                                                                                        $(tooltip).animate({left: '-2px'}, "slow")
                                                                                        






                                                                                        // Title (Name)
                                                                                        var title = document.createElement('h2')
                                                                                        title.innerText = d.name+'\n\n'
                                                                                        title.style.textIndent='10px'
                                                                                        tooltip.appendChild(title)

                                                                                        // Type (Label)
                                                                                        var type = document.createElement('h3')
                                                                                        type.innerText = "You are viewing this database in Schema View, select an option below to get started\n\n\n"
                                                                                        type.setAttribute('style','    text-align: center; padding: 20px;')
                                                                                        tooltip.appendChild(type)


                                                                                        
                                                                                        // Select all nodes of this type
                                                                                        var LabelQueryNodes =  document.createElement('div')
                                                                                        LabelQueryNodes.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(LabelQueryNodes)
                                                                                        LabelQueryNodes.innerText='Show me available '+d.label+" type nodes"

                                                                                        LabelQueryNodes.addEventListener('click',function(){
                                                                                            qstring = 'MATCH (n:'+d.label+') return n'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                        })


                                                                                        // Select nodes that connect to eachother
                                                                                        var ConnectedLabelNodes =  document.createElement('div')
                                                                                        ConnectedLabelNodes.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(ConnectedLabelNodes)
                                                                                        ConnectedLabelNodes.innerText='Show me '+d.label+"s that connect to eachother"

                                                                                        ConnectedLabelNodes.addEventListener('click',function(){
                                                                                            qstring = 'MATCH (n:'+d.label+')-[p]-(m:'+d.label+') return n,p,m'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                        })







                                                                                        // Show me the relationship go out from
                                                                                        var LabelQueryRelsOut =  document.createElement('div')
                                                                                        LabelQueryRelsOut.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(LabelQueryRelsOut)
                                                                                        LabelQueryRelsOut.innerText='Show me nodes that are impacted by '+d.label+" type nodes"

                                                                                        LabelQueryRelsOut.addEventListener('click',function(){
                                                                                            qstring = 'MATCH (n:'+d.label+')-[p]->(q) return n,p,q'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                        })


                                                                                        // Show me the relationship go in from
                                                                                        var LabelQueryRelsIn =  document.createElement('div')
                                                                                        LabelQueryRelsIn.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(LabelQueryRelsIn)
                                                                                        LabelQueryRelsIn.innerText='Show me nodes that directly affect '+d.label+" type nodes"

                                                                                        LabelQueryRelsIn.addEventListener('click',function(){
                                                                                            qstring = 'MATCH (n)-[p]->(q:'+d.label+') return n,p,q'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                        })


                                                                                        // Show me all relationships
                                                                                        var LabelQueryAll =  document.createElement('div')
                                                                                        LabelQueryAll.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(LabelQueryAll)
                                                                                        LabelQueryAll.innerText='Show me all nodes that have a relationship with '+d.label+" type nodes"

                                                                                        LabelQueryAll.addEventListener('click',function(){
                                                                                            qstring = 'MATCH (n)-[p]->(q) where n:'+d.label+ ' or q:'+d.label+' return n,p,q'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                        })



                                                                                        // Exit button
                                                                                        var exit = document.createElement('div')
                                                                                        exit.setAttribute('class','exit_button')
                                                                                        exit.setAttribute('id','exit_tooltip')
                                                                                        tooltip.appendChild(exit)
                                                                                        exit.addEventListener('click',function(){
                                                                                            element.attr("r", node_default_size);
                                                                                            element.attr('fill',default_color)
                                                                                            element.attr('stroke',default_stroke)
                                                                                            $(tooltip).animate({left: '-37%'}, "slow")
                                                                                            try{removeElement('tooltipper')}catch{}
                                                                                        })



                                                


                                                });

                                                // node.on("mouseout", function (d) {
                                                //     removeElement('tooltipper')
                                                // });





                                                node.append("title")
                                                    .text(function (d) { return d.name; });
                                                
                                                //add zoom capabilities 
                                                var zoom_handler = d3.zoom()
                                                    .on("zoom", zoom_actions);

                                                zoom_handler(svg); 

                                                //Drag functions 
                                                //d is the node 
                                                function drag_start(d) {
                                                    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                                                    d.fx = d.x;
                                                    d.fy = d.y;
                                                }
                                                
                                                //make sure you can't drag the circle outside the box
                                                function drag_drag(d) {
                                                    d.fx = d3.event.x;
                                                    d.fy = d3.event.y;
                                                }
                                                
                                                function drag_end(d) {
                                                    if (!d3.event.active) simulation.alphaTarget(0);
                                                    d.fx = null;
                                                    d.fy = null;
                                                }
                                                
                                                //Zoom functions 
                                                function zoom_actions(){
                                                    g.attr("transform", d3.event.transform)
                                                }


                                                
                                                function ticked() {
                                                    //update circle positions each tick of the simulation 
                                                    node
                                                        .attr("cx", function(d) { return d.x; })
                                                        .attr("cy", function(d) { return d.y; });
                                                        
                                                    //update link positions 
                                                    link
                                                        .attr("x1", function(d) { return d.source.x; })
                                                        .attr("y1", function(d) { return d.source.y; })
                                                        .attr("x2", function(d) { return d.target.x; })
                                                        .attr("y2", function(d) { return d.target.y; });

                                                    nodeText
                                                        .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });


                                                    linkText
                                                        .attr("x", function(d) {
                                                            return ((d.source.x + d.target.x)/2);
                                                        })
                                                        .attr("y", function(d) {
                                                            return ((d.source.y + d.target.y)/2);
                                                        });

                                                } // End of TICK function



                                                



                                } // end of RUN GRAPH function

                        // Execute defined function
                        run(graph)

                } // End of if Successful clause in API event


        }); // End of API call event listener


// Send out actual API call
var selector = EnvironmentSelected[EnvironmentSelected.length-1]
var URL = Environment[selector][0].URL
var PASS = Environment[selector][1].BasicPass
xhr.open("POST", URL+":7474/db/data/transaction/commit");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Authorization", "Basic "+PASS);
xhr.send(dataz);



} // End of Run New Graph Function


// Data Gathering/Formatting from Neo4J


        // Run graph
        

        // Start up default view
        Run_Schema_Graph('CALL db.schema.visualization()')
        











        //Schema Query
        document.getElementById('SchemaOption').addEventListener('click',function(){
            d3.selectAll("svg > *").remove();
            Run_Schema_Graph('CALL db.schema.visualization()')
        })


        // Legend Creation
        document.getElementById('LegendOption').addEventListener('click', function(){
            
            var LegendFrame = document.createElement('div')
            LegendFrame.setAttribute('class','LegendFrame')
            document.body.appendChild(LegendFrame)
            $(LegendFrame).animate({left: '-2px'}, "slow")

//             <table>
//   <tr>
//     <th>Firstname</th>
//     <th>Lastname</th>
//   </tr>
//   <tr>
//     <td>Peter</td>
//     <td>Griffin</td>
//   </tr>
//   <tr>
//     <td>Lois</td>
//     <td>Griffin</td>
//   </tr>
// </table>




            var table = document.createElement('table')
            table.setAttribute('style','position: relative; top: 60px;')
            LegendFrame.appendChild(table)

            var labelRow = document.createElement('tr')
            table.appendChild(labelRow)
                    var nodeLabelHeader = document.createElement('th')
                    nodeLabelHeader.setAttribute('class','table_header')
                    nodeLabelHeader.innerText='Node Type'
                    labelRow.appendChild(nodeLabelHeader)


                    var nodeColorHeader = document.createElement('th')
                    nodeColorHeader.setAttribute('class','table_header')
                    nodeColorHeader.innerText='Node Color'
                    labelRow.appendChild(nodeColorHeader)

            var APIRow = document.createElement('tr')
            table.appendChild(APIRow)
                    var APILabel = document.createElement('th')
                    APILabel.setAttribute('class','row_spacer')
                    APILabel.innerText='API'
                    APIRow.appendChild(APILabel)

                    var APIValue = document.createElement('th')
                    APIValue.setAttribute('style','background-color:#2c8ef8; border-radius:50px;')
                    APIRow.appendChild(APIValue)

            var ApplicationRow = document.createElement('tr')
            table.appendChild(ApplicationRow)
                    var ApplicationLabel = document.createElement('th')
                    ApplicationLabel.setAttribute('class','row_spacer')
                    ApplicationLabel.innerText='Application'
                    ApplicationRow.appendChild(ApplicationLabel)

                    var ApplicationValue = document.createElement('th')
                    ApplicationValue.setAttribute('style','background-color:#6b5eae; border-radius:50px;')
                    ApplicationRow.appendChild(ApplicationValue)


            var ComponentRow = document.createElement('tr')
            table.appendChild(ComponentRow)
                    var ComponentLabel = document.createElement('th')
                    ComponentLabel.setAttribute('class','row_spacer')
                    ComponentLabel.innerText='Component'
                    ComponentRow.appendChild(ComponentLabel)

                    var ComponentValue = document.createElement('th')
                    ComponentValue.setAttribute('style','background-color:#fa5c7c; border-radius:50px;')
                    ComponentRow.appendChild(ComponentValue)


            var DatabaseRow = document.createElement('tr')
            table.appendChild(DatabaseRow)
                    var DatabaseLabel = document.createElement('th')
                    DatabaseLabel.setAttribute('class','row_spacer')
                    DatabaseLabel.innerText='Database'
                    DatabaseRow.appendChild(DatabaseLabel)

                    var DatabaseValue = document.createElement('th')
                    DatabaseValue.setAttribute('style','background-color:#fd7e14; border-radius:50px;')
                    DatabaseRow.appendChild(DatabaseValue)


            var DatasourceRow = document.createElement('tr')
            table.appendChild(DatasourceRow)
                    var DatasourceLabel = document.createElement('th')
                    DatasourceLabel.setAttribute('class','row_spacer')
                    DatasourceLabel.innerText='Datasource'
                    DatasourceRow.appendChild(DatasourceLabel)

                    var DatasourceValue = document.createElement('th')
                    DatasourceValue.setAttribute('style','background-color:#ffbc00; border-radius:50px;')
                    DatasourceRow.appendChild(DatasourceValue)


            var FileRow = document.createElement('tr')
            table.appendChild(FileRow)
                    var FileLabel = document.createElement('th')
                    FileLabel.setAttribute('class','row_spacer')
                    FileLabel.innerText='File'
                    FileRow.appendChild(FileLabel)

                    var FileValue = document.createElement('th')
                    FileValue.setAttribute('style','background-color:#0acf97; border-radius:50px;')
                    FileRow.appendChild(FileValue)


            var PersonRow = document.createElement('tr')
            table.appendChild(PersonRow)
                    var PersonLabel = document.createElement('th')
                    PersonLabel.setAttribute('class','row_spacer')
                    PersonLabel.innerText='Person'
                    PersonRow.appendChild(PersonLabel)

                    var PersonValue = document.createElement('th')
                    PersonValue.setAttribute('style','background-color:#02a8b5; border-radius:50px;')
                    PersonRow.appendChild(PersonValue)


            var ProjectRow = document.createElement('tr')
            table.appendChild(ProjectRow)
                    var ProjectLabel = document.createElement('th')
                    ProjectLabel.setAttribute('class','row_spacer')
                    ProjectLabel.innerText='Project'
                    ProjectRow.appendChild(ProjectLabel)

                    var ProjectValue = document.createElement('th')
                    ProjectValue.setAttribute('style','background-color:#8391a2; border-radius:50px;')
                    ProjectRow.appendChild(ProjectValue)


            var ReportsRow = document.createElement('tr')
            table.appendChild(ReportsRow)
                    var ReportsLabel = document.createElement('th')
                    ReportsLabel.setAttribute('class','row_spacer')
                    ReportsLabel.innerText='Reports'
                    ReportsRow.appendChild(ReportsLabel)

                    var ReportsValue = document.createElement('th')
                    ReportsValue.setAttribute('style','background-color:#e3eaef; border-radius:50px;')
                    ReportsRow.appendChild(ReportsValue)


            var TableRow = document.createElement('tr')
            table.appendChild(TableRow)
                    var TableLabel = document.createElement('th')
                    TableLabel.setAttribute('class','row_spacer')
                    TableLabel.innerText='Table'
                    TableRow.appendChild(TableLabel)

                    var TableValue = document.createElement('th')
                    TableValue.setAttribute('style','background-color:#464f5b; border-radius:50px;')
                    TableRow.appendChild(TableValue)

// var API_Color = '#2c8ef8'
//         var Application_Color = '#6b5eae'
//         var Component_Color = '#fa5c7c'
//         var Database_Color = '#fd7e14'
//         var Datasource_Color = '#ffbc00'
//         var File_Color = '#0acf97'
//         var Person_Color = '#02a8b5'
//         var Project_Color = '#8391a2'
//         var Reports_Color = '#e3eaef'
//         var Table_Color = '#464f5b'

            var exit = document.createElement('div')
            exit.setAttribute('class','exit_button')
            LegendFrame.appendChild(exit)
            exit.addEventListener('click',function(){
                $(LegendFrame).animate({left: '-37%'}, "slow")
            })

        })

        // Schema View
        //CALL db.schema.visualization()







                    // Helper function for unique objects in an array
                    

                function onlyUnique(value, index, self) { 
                    // JSONOBJECT.filter( onlyUnique )
                    return self.indexOf(value) === index;
                }


                    // Helper function for Capitilzing first letter
                     function capFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
                }






                    // Helper function brighten colors
                    function increase_brightness(hex, percent){
                            // strip the leading # if it's there
                            hex = hex.replace(/^\s*#|\s*$/g, '');

                            // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`
                            if(hex.length == 3){
                                hex = hex.replace(/(.)/g, '$1$1');
                            }

                            var r = parseInt(hex.substr(0, 2), 16),
                                g = parseInt(hex.substr(2, 2), 16),
                                b = parseInt(hex.substr(4, 2), 16);

                            return '#' +
                            ((0|(1<<8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +
                            ((0|(1<<8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +
                            ((0|(1<<8) + b + (256 - b) * percent / 100).toString(16)).substr(1);
                        }






                    // Helper function for grouping API response for D3 ingestion
                    var groupBy = function(items,propertyName){
                        var result = [];
                        $.each(items, function(index, item) {
                            if ($.inArray(item[propertyName], result)==-1) {
                                //result.push(item[propertyName]);
                                result.push(item);
                            }
                        });
                        return result;
                    }


                    // Helper function to remove elements
                    function removeElement(elementId) {
                            // Removes an element from the document
                            var element = document.getElementById(elementId);
                            element.parentNode.removeChild(element);
                        }


                    // Helper fuction to hide/show elements

                    function toggledisplay(elementID){

                                            (function(style) {
                                                
                                                var id = '#'+elementID
                                                // style.display = style.display === 'none' ? '' : 'none';
                                                style.display = style.display === 'none' ? setTimeout(function(){  $(id).fadeIn(); $(id).animate({left: '50%'}, 10);}, 10) :  setTimeout(function(){  $(id).fadeOut();   $(id).animate({left: '-150%'}, 0); }, 10)
                                            })
                            (document.getElementById(elementID).style);
                        }
































































































































        // Default Query
        var dataz = JSON.stringify({"statements":[{"statement":"MATCH p=()-[r:Supports]->() RETURN p LIMIT 25",
                                    "resultDataContents" : [ "row", "graph" ]}]});

                                        






// Given a query, create a network diagram
var Run_New_Graph = function(query){


    // Insert query into API request letter
    var dataz = JSON.stringify({"statements":[{"statement":query, "resultDataContents" : [ "row", "graph" ]}]});



// Instantiate API call
var xhr = new XMLHttpRequest();
xhr.withCredentials = false;
// API call event listener for successful call
xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {

                            // Placeholders for data
                            var NeoData = new Array()
                            var Neo_Nodes = new Array()
                            var Neo_Rels = new Array()

                            // Capture response
                            var data = JSON.parse(this.responseText)


                            // Loop through response to format data into appropriate structure, saved as JSON
                            for (i=0; i<data.results[0].data.length; i++){

                                            // Attribute filler, basically string injects the values in the D3 Node Object
                                            var attrFiller = function(){
                                                var attribute_string_injection = ''
                                                for (let [key, value] of Object.entries(data_temp_nodes[j].properties)) {
                                                                value = value.replace(/"/g, "'");
                                                                value = value.replace(/[()]/g, ''); 
                                                                A_Part = `, "${key}":"${value}" `;
                                                                attribute_string_injection += A_Part
                                                                }
                                                return attribute_string_injection
                                            }

                                            // Props filler is used as a reference attribute on the node. This will allow someone to deduce
                                            // the props that exist on a node
                                            var propsFiller = function(){
                                                var props_array_filter = ''
                                                for (let [key, value] of Object.entries(data_temp_nodes[j].properties)) {
                                                                A_Part = `${key},`;
                                                                props_array_filter += A_Part
                                                                }
                                                props_array_filter = props_array_filter.substring(0,props_array_filter.length-1)
                                                return props_array_filter

                                            }
                               
                                
                                            // Nodes Loop
                                            var data_temp_nodes = data.results[0].data[i].graph.nodes

                                                            for (j=0; j<data_temp_nodes.length; j++){

                                                                // var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'", "name":"'+data_temp_nodes[j].properties.name+'", "purpose":"'+purposeNuller()+'"}'
                                                                var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'"'+attrFiller()+', "propsarray":"'+propsFiller()+'"}'
                                                                
                                                                //console.log('CHECK THIS FOR POST INJECTION NODE VALUES:   '+ node)
                                                                console.log("THIS NEEDS TO BE JSON OBJECT:  "+node)
                                                                var node = JSON.parse(node)
                                                                Neo_Nodes.push(node)
                                                                
                                                            }

                                            // Links loop
                                            var data_temp_rels = data.results[0].data[i].graph.relationships
                                            
                                                            for (k=0; k<data_temp_rels.length; k++){
                                                                var rel = '{"source":"'+ data_temp_rels[k].startNode +'", "target":"'+data_temp_rels[k].endNode+'", "relname":"'+data_temp_rels[k].type+'"}'
                                                                var rel = JSON.parse(rel)
                                                                Neo_Rels.push(rel)
                                                            }

                            } // End of format response loop


                            // Assign formatted data to data placeholders
                            var Neo_Nodes = [...new Set(Neo_Nodes.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));
                            var Neo_Rels = [...new Set(Neo_Rels.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));


                            // Assign placeholders to single, graphable object
                            var graph = []
                            graph.nodes= Neo_Nodes
                            graph.links= Neo_Rels
                            ExportData.pop()
                            ExportData.push(graph)
                            


  
                            // Create function to create D3 graph consistently across gathered data
                            function run(graph) {

                                                // Select SVG object to populate
                                                var svg = d3.select("svg"),

                                                // Grab SVG size attributes for D3 object interactivity
                                                //width = svg.attr("width"),
                                                //height = svg.attr("height");

                                                width = 1550
                                                height = 690
                                            
                                                


                                                // Create a force network simulation
                                                var simulation = d3.forceSimulation()
                                                    .nodes(graph.nodes);                    


                                                // Assign attributes to simulation
                                                simulation
                                                    .force("charge_force", d3.forceManyBody().strength(-180))    
                                                    .force("center_force", d3.forceCenter(width/2,height/2))
                                                    .force("links", d3.forceLink(graph.links).id(function (d) { return d.id; }))
                                                    .force("links", d3.forceLink(graph.links).distance(175))            
                                                    .force("collide", d3.forceCollide().radius(1))
                                                    ;         


                                                // Assign tick function, which executes every millisecond (animation loop)
                                                simulation
                                                    .on("tick", ticked);




                                                // Add encompassing group for the zoom 
                                                var g = svg.append("g")
                                                    .attr("class", "everything");


                                                // Create definition for the arrow markers showing relationship directions
                                                g.append("defs").append("marker")
                                                    .attr("id", "arrow")
                                                    .attr("viewBox", "4 -3 10 10")
                                                    .attr("refX", 22)
                                                    .attr("refY", 0)
                                                    .attr("markerWidth", 6)
                                                    .attr("markerHeight", 6)
                                                    .attr("orient", "auto")
                                                    .append("svg:path")
                                                    .attr("d", "M0,-5L10,0L0,5");        

                                                // Create Link objects
                                                var link = g.append("g")
                                                    .attr("class", "links")
                                                    .selectAll("line")
                                                    .data(graph.links)
                                                    .enter().append("line")
                                                    .attr("stroke", function(d) { return d3.color("rgb(167, 167, 167)"); })
                                                    .style("stroke-width",'2px')
                                                    .attr("marker-end", "url(#arrow)");

                                                // Create Node objects
                                                var node = g.append("g")
                                                    .attr("class", "nodes")
                                                    .selectAll("circle")
                                                    .data(graph.nodes)
                                                    .enter()
                                                    .append("circle")
                                                    .attr("r", node_default_size)
                                                    .attr("fill", function(d) { 
                                                        // CONDITIONAL COLOR OF NODES START



                                                        if (d.label == 'API') {
                                                            return d3.color(API_Color)}
                                                        else if (d.label == 'Person'){
                                                            return d3.color(Person_Color)
                                                        }
                                                        else if (d.label == 'Application'){
                                                            return d3.color(Application_Color)
                                                        }
                                                        else if (d.label == 'Component'){
                                                            return d3.color(Component_Color)
                                                        }
                                                        else if (d.label == 'Datasource'){
                                                            return d3.color(Datasource_Color)
                                                        }
                                                        else if (d.label == 'Database'){
                                                            return d3.color(Database_Color)
                                                        }
                                                        else if (d.label == 'File'){
                                                            return d3.color(File_Color)
                                                        }
                                                        else if (d.label == 'Project'){
                                                            return d3.color(Project_Color)
                                                        }
                                                        else if (d.label == 'Reports'){
                                                            return d3.color(Reports_Color)
                                                        }
                                                        else if (d.label == 'Table'){
                                                            return d3.color(Table_Color)
                                                        }
                                                        else {
                                                        return d3.color("#ffbc00");
                                                            }

                                                         })
                                                        // CONDITIONAL COLOR OF NODES END




                                                    .style("stroke", function(d) { 
                                                        // CONDITIONAL COLOR OF NODE OUTLINE START
                                                        if (d.sourceOnly) return d3.color("#000080");

                                                        return d3.color("#e2e2e2"); 
                                                        });
                                                        // CONDITIONAL COLOR OF NODE OUTLINE END




                                                    // Create Node Labels
                                                    var nodeText = g.append("g").attr("class", "labels").selectAll("g")
                                                        .data(graph.nodes)
                                                        .enter().append("g")
                                                        .append("text")
                                                        .attr("x", 14)
                                                        .attr("y", ".31em")
                                                        .style("font-family", "sans-serif")
                                                        .style('font-weight','bolder')
                                                        .style("font-size", "16px")
                                                        .text(function (d) { return d.name; });


                                                    // Create Link Labels
                                                    var linkText = g.append("g").attr("class", "labels").selectAll("g")
                                                        .data(graph.links)
                                                        .enter().append("text")
                                                        .attr("font-family", "Arial, Helvetica, sans-serif")
                                                        .attr("fill", "Black")
                                                        .style("font", "italic 8px Arial")
                                                        .attr("dx", ".75em")
                                                        .text(function(d) { return d.relname; });


                                                    link.append("title")
                                                    .text(function (d) { return d.relname; });



                                                    // Create drag capabilities  
                                                    var drag_handler = d3.drag()
                                                        .on("start", drag_start)
                                                        .on("drag", drag_drag)
                                                        .on("end", drag_end);	
                                                    drag_handler(node);


                                                    // Node Click Function
                                                    node.on("click", function (d) {

                                                                                        try{ 
                                                                                        $( "#exit_tooltip" ).click();
                                                                                        removeElement('exit_tooltip')
                                                                                        }
                                                                                           catch{console.log('no toolip present')}

                                                                                        var default_color = d3.select(this).attr("fill")
                                                                                        var default_stroke = d3.select(this).attr("stroke")
                                                                                        

                                                                                        // change node size
                                                                                        d3.select(this).attr("r", node_growth_size);
                                                                                        element = d3.select(this)

                                                                                        // change node outline / color

                                                                                        d3.select(this).attr("fill","#000000ad")
                                                                                        d3.select(this).attr('stroke','#fb00ff')


                                                                                        // Tooltip Create
                                                                                        var tooltip = document.createElement('div')
                                                                                        // tooltip.setAttribute('style','top:'+window.mouseYPos+'px; left:'+window.mouseXPos+'px;')
                                                                                        tooltip.setAttribute('class','tooltip_class')
                                                                                        tooltip.setAttribute('id','tooltipper')
                                                                                        document.body.appendChild(tooltip)
                                                                                        $(tooltip).animate({left: '-2px'}, "slow")
                                                                                        


                                                                                        // Title (Name)
                                                                                        var title = document.createElement('h2')
                                                                                        title.innerText = d.name
                                                                                        title.setAttribute('style',"text-indent:10px; padding-top:45px")
                                                                                        tooltip.appendChild(title)

                                                                                        // Type (Label)
                                                                                        var type = document.createElement('h3')
                                                                                        type.innerText = d.label+" type node\n\n    "//+d.purpose+"\n\n\n"
                                                                                        type.setAttribute('style',"position:relative; left:10px; max-width: 450px;")
                                                                                        tooltip.appendChild(type)






                                                                                        // Edit Node ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START OF EDIT NODE
                                                                                        var edit_button = document.createElement('img')
                                                                                        edit_button.setAttribute('src','edit.png')
                                                                                        edit_button.setAttribute('class','edit_button')
                                                                                        tooltip.appendChild(edit_button)
                                                                                        edit_button.addEventListener('click',function(){

                                                                                                                            // Create window
                                                                                                                            var window = document.createElement('div')
                                                                                                                            window.setAttribute('class','CypherOptionWindowFrame')
                                                                                                                            window.setAttribute('style','display:none')
                                                                                                                            window.setAttribute('id','EditWindow')
                                                                                                                            $(window).fadeIn(500);
                                                                                                                            document.body.appendChild(window)


                                                                                                                            // second windw
                                                                                                                            var secondwindow = document.createElement('div')
                                                                                                                            secondwindow.setAttribute('class','CypherOptionWindow')
                                                                                                                            window.appendChild(secondwindow)

                                                                                                                            // Title
                                                                                                                            var EditTitle = document.createElement('h2')
                                                                                                                            EditTitle.innerText = d.name
                                                                                                                            EditTitle.setAttribute('style',"padding-top:40px; text-align:center")
                                                                                                                            secondwindow.appendChild(EditTitle)


                                                                                                                            // Intro
                                                                                                                            var EditIntro = document.createElement('h5')
                                                                                                                            EditIntro.innerText='Please enter the name of the attribute youd like to edit for this node and the value youd like to set it to.\nThis action will either update the current value or create a new attribute entry for it.'
                                                                                                                            EditIntro.setAttribute('style',"text-align:center")
                                                                                                                            secondwindow.appendChild(EditIntro)

                                                                                                                            // Attribute Input
                                                                                                                            var EditAttribute_Input = document.createElement('input')
                                                                                                                            EditAttribute_Input.setAttribute('type','text')
                                                                                                                            EditAttribute_Input.setAttribute('id','Edit_Attribute_Input_'+d.id)
                                                                                                                            EditAttribute_Input.setAttribute('class','labelselectClass')
                                                                                                                            EditAttribute_Input.setAttribute('style','width: 300px; top: 50px; left: 120px;')
                                                                                                                            secondwindow.appendChild(EditAttribute_Input)

                                                                                                                            var Edit_Attribute_Input_Label = document.createElement('h4')
                                                                                                                            Edit_Attribute_Input_Label.innerText='Attribute'
                                                                                                                            Edit_Attribute_Input_Label.setAttribute('style','left: 31px; position: relative; width:1px')
                                                                                                                            secondwindow.appendChild(Edit_Attribute_Input_Label)


                                                                                                                            
                                                                                                                            // Attribute Value Input
                                                                                                                            var EditAttribute_Value = document.createElement('input')
                                                                                                                            EditAttribute_Value.setAttribute('type','textarea')
                                                                                                                            EditAttribute_Value.setAttribute('id','Edit_Attribute_Value_'+d.id)
                                                                                                                            EditAttribute_Value.setAttribute('class','labelselectClass')
                                                                                                                            EditAttribute_Value.setAttribute('style','width: 920px; top: 30px; left: 119px; text-align: left; text-indent: 15px;')
                                                                                                                            secondwindow.appendChild(EditAttribute_Value)

                                                                                                                            var Edit_Attribute_Value_Label = document.createElement('h4')
                                                                                                                            Edit_Attribute_Value_Label.innerText='Value'
                                                                                                                            Edit_Attribute_Value_Label.setAttribute('style','left: 50; position: relative; top:-20px; width:1px')
                                                                                                                            secondwindow.appendChild(Edit_Attribute_Value_Label)

                                                                                                                            // Create Excecution of element

                                                                                                                            var Edit_Submit_Button = document.createElement('button')
                                                                                                                            Edit_Submit_Button.setAttribute('class','cyphersubmit')
                                                                                                                            Edit_Submit_Button.setAttribute('style','top:370px')
                                                                                                                            Edit_Submit_Button.innerText='Submit'
                                                                                                                            secondwindow.appendChild(Edit_Submit_Button)
                                                                                                                            Edit_Submit_Button.addEventListener('click',function(){
                                                                                                                                console.log('submitted')
                                                                                                                                                                            
                                                                                                                                                                            var attribute_name = document.getElementById('Edit_Attribute_Input_'+d.id).value
                                                                                                                                                                            attribute_name = attribute_name.toLowerCase()
                                                                                                                                                                            attribute_name = attribute_name.replace(/ /g, "_");
                                                                                                                                                                            attribute_name = attribute_name.replace(/[()]/g, ''); 
                                                                                                                                                                            console.log('AttName =  '+attribute_name)
                                                                                                                                                                            var attribute_value = document.getElementById('Edit_Attribute_Value_'+d.id).value
                                                                                                                                                                            attribute_value = attribute_value.replace(/'/g, "");
                                                                                                                                                                            attribute_value = attribute_value.replace(/"/g, "'");
                                                                                                                                                                            attribute_value = attribute_value.replace(/[()]/g, ''); 
                                                                                                                                                                            console.log('AttValue =  '+attribute_value)
                                                                                                                                                                            //match(n) where id(n)=157645 set n.name = 'Tyalor' return n
                                                                                                                                                                            var query =  'match(n) where id(n) = '+d.id+' set n.'+attribute_name+' = '+"'"+attribute_value+"' return n"
                                                                                                                                                                            console.log('Query is  :  '+query)
                                                                                                                                                                            //Input search type event
                                                                                                                                                                            var thequery = JSON.stringify({"statements":[{"statement":query}]});
                                                                                                                                                                            editxhr = new XMLHttpRequest;
                                                                                                                                                                            var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                                                                                    var URL = Environment[selector][0].URL
                                                                                                                                                                                    var PASS = Environment[selector][1].BasicPass

                                                                                                                                                                            editxhr.open("POST", URL+":7474/db/data/transaction/commit");
                                                                                                                                                                            ///db/neo4j/tx
                                                                                                                                                                            editxhr.setRequestHeader("Content-Type", "application/json");
                                                                                                                                                                            editxhr.setRequestHeader("Accept", "application/json");
                                                                                                                                                                            editxhr.setRequestHeader("Authorization", "Basic "+PASS);
                                                                                                                                                                            editxhr.withCredentials = false;
                                                                                                                                                                            editxhr.send(thequery);
                                                                                                                                                                            
                                                                                                                                                                        // API call event listener for successful call
                                                                                                                                                                            editxhr.addEventListener("readystatechange", function() {
                                                                                                                                                                                console.log('OG IS    '+this.responseText)
                                                                                                                                                                            if(this.readyState === 4) { 
                                                                                                                                                                                $( "#exit_tooltip_edit" ).click();
                                                                                                                                                                                console.log(this.responseText)
                                                                                                                                                                                d3.selectAll("svg > *").remove();
                                                                                                                                                                                try{Run_New_Graph(globalQuery[globalQuery.length-1])} catch{ try{Run_Schema_Graph('CALL db.schema.visualization()')}catch{console.log("Inner works :)")}}
                                                                                                                                                                                //Run_Schema_Graph('CALL db.schema.visualization()')

                                                                                                                                                                                try{$( "#exit_tooltip" ).click();}catch{}

                                                                                                                                                                                try {removeElement('EditWindow')
                                                                                                                                                                                $(secondwindow).animate({left: '-100%'}, "slow")
                                                                                                                                                                                $(window).fadeOut(800);
                                                                                                                                                                            } catch {console.log('no need, exit click worked')}
                                                                                                                                                                                $('#Success_Message').fadeIn()
                                                                                                                                                                                setTimeout(function(){$('#Success_Message').fadeOut()},6000)




                                                                                                                                                                            } else {
                                                                                                                                                                                console.log('This query didnt work!')}

                                                                                                                                                                                

                                                                                                                                                                            }//function end
                                                                                                                                                                            )//xhr event lisetern end
                                                                                                                                                                            


                                                                                                                                                                            }) // Submit button listener END
                                                                                                                                                                        
                                                                                                                            



                                                                                                                            // Exit button
                                                                                                                            var editexit = document.createElement('div')
                                                                                                                            editexit.setAttribute('class','exit_button')
                                                                                                                            editexit.setAttribute('id','exit_tooltip_edit')
                                                                                                                            secondwindow.appendChild(editexit)
                                                                                                                            editexit.addEventListener('click',function(){
                                                                                                                                $(window).fadeOut(1500)
                                                                                                                                
                                                                                                                               setTimeout(removeElement('EditWindow'),2000)
                                                                                                                            
                                                                                                                            })


                                                                                                                            

                                                                                                                            


                                        



                                                                                        })
                                                                                        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END OF EDIT FUNCTIONALITY











                                                                                        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START OF REMOVE FUNCTIONALITY
                                                                                        // Remove Node from DB
                                                                                        var removebutton = document.createElement('img')
                                                                                        removebutton.setAttribute('class','remove_button')
                                                                                        removebutton.setAttribute('src','trash.png')
                                                                                        tooltip.appendChild(removebutton)
                                                                                        removebutton.addEventListener('click',function(){

                                                                                                        // Create window
                                                                                                        var removeBackWindow = document.createElement('div')
                                                                                                        removeBackWindow.setAttribute('class','CypherOptionWindowFrame')
                                                                                                        removeBackWindow.setAttribute('style','display:none')
                                                                                                        removeBackWindow.setAttribute('id','RemoveWindow')
                                                                                                        $(removeBackWindow).fadeIn(500);
                                                                                                        document.body.appendChild(removeBackWindow)


                                                                                                        // second windw
                                                                                                        var removesecondwindow = document.createElement('div')
                                                                                                        removesecondwindow.setAttribute('class','CypherOptionWindow')
                                                                                                        removeBackWindow.appendChild(removesecondwindow)

                                                                                                        // Title
                                                                                                        var RemoveTitle = document.createElement('h2')
                                                                                                        RemoveTitle.innerText = 'WARNING'
                                                                                                        RemoveTitle.setAttribute('style',"padding-top:40px; text-align:center; color:red; font-weight:900")
                                                                                                        removesecondwindow.appendChild(RemoveTitle)


                                                                                                        // Intro
                                                                                                        var RemoveIntro = document.createElement('h5')
                                                                                                        RemoveIntro.innerText='This action will remove this node and all the relationships attached to it. Are you sure you want to do this?'
                                                                                                        RemoveIntro.setAttribute('style',"text-align:center")
                                                                                                        removesecondwindow.appendChild(RemoveIntro)

                                                                                                        // Submit
                                                                                                        var Submit_Removal = document.createElement('button')
                                                                                                            Submit_Removal.setAttribute('class','cyphersubmit')
                                                                                                            Submit_Removal.setAttribute('style','top:248px; background-color:red;')
                                                                                                            Submit_Removal.innerText='DELETE'
                                                                                                            removesecondwindow.appendChild(Submit_Removal)
                                                                                                            // match(n) where id(n)=115 detach delete n

                                                                                                            Submit_Removal.addEventListener('click',function(){

                                                                                                                                 var query =  'match (n) where id(n)='+d.id+' detach delete n'
                                                                                                                                                                            
                                                                                                                                //Input search type event
                                                                                                                                var thequery = JSON.stringify({"statements":[{"statement":query}]});
                                                                                                                                RMxhr = new XMLHttpRequest;
                                                                                                                                var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                                        var URL = Environment[selector][0].URL
                                                                                                                                        var PASS = Environment[selector][1].BasicPass

                                                                                                                                RMxhr.open("POST", URL+":7474/db/data/transaction/commit");
                                                                                                                                ///db/neo4j/tx
                                                                                                                                RMxhr.setRequestHeader("Content-Type", "application/json");
                                                                                                                                RMxhr.setRequestHeader("Accept", "application/json");
                                                                                                                                RMxhr.setRequestHeader("Authorization", "Basic "+PASS);
                                                                                                                                RMxhr.withCredentials = false;
                                                                                                                                RMxhr.send(thequery);
                                                                                                                                
                                                                                                                            // API call event listener for successful call
                                                                                                                                RMxhr.addEventListener("readystatechange", function() {
                                                                                                                                    console.log('OG IS    '+this.responseText)
                                                                                                                                if(this.readyState === 4) { 
                                                                                                                                    $( "#exit_tooltip_remove" ).click();
                                                                                                                                    console.log(this.responseText)
                                                                                                                                    d3.selectAll("svg > *").remove();
                                                                                                                                    try{Run_New_Graph(globalQuery[globalQuery.length-1])} catch{ try{Run_Schema_Graph('CALL db.schema.visualization()')}catch{console.log("Inner works :)")}}
                                                                                                                                    //Run_Schema_Graph('CALL db.schema.visualization()')

                                                                                                                                    try{$( "#exit_tooltip" ).click();}catch{}

                                                                                                                                    try {removeElement('RemoveWindow')
                                                                                                                                    $(removesecondwindow).animate({left: '-100%'}, "slow")
                                                                                                                                    $(removeBackWindow).fadeOut(800);
                                                                                                                                } catch {console.log('no need, exit click worked')}
                                                                                                                                    $('#Success_Message').fadeIn()
                                                                                                                                    setTimeout(function(){$('#Success_Message').fadeOut()},6000)




                                                                                                                                } else {
                                                                                                                                    console.log('This query didnt work!')}

                                                                                                                                    

                                                                                                                                }//function end
                                                                                                                                )//event lisetern end


                                                                                                            })
                                                                                                           

                                                                                                        // Exit button
                                                                                                        var removeexit = document.createElement('div')
                                                                                                        removeexit.setAttribute('class','exit_button')
                                                                                                        removeexit.setAttribute('id','exit_tooltip_remove')
                                                                                                        removesecondwindow.appendChild(removeexit)
                                                                                                        removeexit.addEventListener('click',function(){
                                                                                                            $(removeBackWindow).fadeOut(1500)
                                                                                                            setTimeout(removeElement('RemoveWindow'),2000)
                                                                                                        })
                                                                                        })  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~          END OF REMOVE NODE FUNCTIONALITY  









                                                                                        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CREATE NEW RELATIONSHIP START

                                                                                        // Create relationship between this node and another
                                                                                        var createRelationshipButton = document.createElement('img')
                                                                                        createRelationshipButton.setAttribute('class','link_button')
                                                                                        createRelationshipButton.setAttribute('src','link.png')
                                                                                        tooltip.appendChild(createRelationshipButton)
                                                                                        createRelationshipButton.addEventListener('click',function(){

                                                                                            
                                                                                                                        // Create window
                                                                                                                        var createRelBackwindow = document.createElement('div')
                                                                                                                        createRelBackwindow.setAttribute('class','CypherOptionWindowFrame')
                                                                                                                        createRelBackwindow.setAttribute('style','display:none')
                                                                                                                        createRelBackwindow.setAttribute('id','CreateRelWindow')
                                                                                                                        $(createRelBackwindow).fadeIn(500);
                                                                                                                        document.body.appendChild(createRelBackwindow)


                                                                                                                        // second windw
                                                                                                                        var createRelSecondwindow = document.createElement('div')
                                                                                                                        createRelSecondwindow.setAttribute('class','CypherOptionWindow')
                                                                                                                        createRelBackwindow.appendChild(createRelSecondwindow)

                                                                                                                        // Title
                                                                                                                        var CreateRelTitle = document.createElement('h2')
                                                                                                                        CreateRelTitle.innerText = 'Create Relationship for '+d.name
                                                                                                                        CreateRelTitle.setAttribute('style',"padding-top:40px; text-align:center;")
                                                                                                                        createRelSecondwindow.appendChild(CreateRelTitle)


                                                                                                                        // Intro
                                                                                                                        var CreateRelIntro = document.createElement('h5')
                                                                                                                        CreateRelIntro.innerText='Select the node youd like to connect to this to, declare the name of the relationship and indicate direction'
                                                                                                                        CreateRelIntro.setAttribute('style',"text-align:center")
                                                                                                                        createRelSecondwindow.appendChild(CreateRelIntro)

                                                                                                                        //Node Instruction
                                                                                                                        var Node_To_Select = document.createElement('h3')
                                                                                                                        Node_To_Select.setAttribute('style','position: absolute; left: 30px; top: 159px;')
                                                                                                                        Node_To_Select.innerText= 'Connect to:'
                                                                                                                        createRelSecondwindow.appendChild(Node_To_Select)

                                                                                                                        // Node Dropdown
                                                                                                                        var NodeDropdown = document.createElement('select')
                                                                                                                        NodeDropdown.setAttribute('class','labelselectClass')
                                                                                                                        NodeDropdown.setAttribute('style','top: 20px; left: 150px;')
                                                                                                                        NodeDropdown.setAttribute('id','NodeDropdownRelCreation')

                                                                                                                        createRelSecondwindow.appendChild(NodeDropdown)
                                                                                                                        var RelXHR = new XMLHttpRequest();
                                                                                                                        RelXHR.withCredentials = false;
                                                                                                                        var dataz = JSON.stringify({"statements":[{"statement":"Match (n) return n", "resultDataContents" : [ "row", "graph" ]}]});
                                                                                                                        var xhrenvironment = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                        var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                        var URL = Environment[selector][0].URL
                                                                                                                        var PASS = Environment[selector][1].BasicPass
                                                                                                                        RelXHR.open("POST", URL+":7474/db/neo4j/tx");
                                                                                                                        RelXHR.setRequestHeader("Content-Type", "application/json");
                                                                                                                        RelXHR.setRequestHeader("Accept", "application/json");
                                                                                                                        RelXHR.setRequestHeader("Authorization", "Basic "+PASS);
                                                                                                                        RelXHR.send(dataz);
                                                                                                                        // API call event listener for successful call
                                                                                                                        RelXHR.addEventListener("readystatechange", function() {
                                                                                                                        if(this.readyState === 4) {

                                                                                                                                                // Placeholders for data
                                                                                                                                                var NeoData = new Array()
                                                                                                                                                var Neo_Nodes = new Array()
                                                                                                                                                var Neo_Rels = new Array()

                                                                                                                                                // Capture response
                                                                                                                                                var data = JSON.parse(this.responseText)
                                                                                                                                                console.log(data)

                                                                                                                                                // Loop through response to format data into appropriate structure, saved as JSON
                                                                                                                                                for (i=0; i<data.results[0].data.length; i++){
                                                                                                                                                    
                                                                                                                                                                // Nodes Loop
                                                                                                                                                                var data_temp_nodes = data.results[0].data[i].graph.nodes
                                                                                                                                                                console.log(data_temp_nodes)
                                                                                                                                                                        for (j=0; j<data_temp_nodes.length; j++){
                                                                                                                                                                            var node = '{"id":"'+ data_temp_nodes[j].id +'", "label":"'+data_temp_nodes[j].labels+'", "name":"'+data_temp_nodes[j].properties.name+'"}'
                                                                                                                                                                            var node = JSON.parse(node)
                                                                                                                                                                            Neo_Nodes.push(node)
                                                                                                                                                                        }

                                                                                                                                                                // Links loop
                                                                                                                                                                var data_temp_rels = data.results[0].data[i].graph.relationships
                                                                                                                                                                console.log(data_temp_rels)
                                                                                                                                                                        for (k=0; k<data_temp_rels.length; k++){
                                                                                                                                                                            var rel = '{"source":"'+ data_temp_rels[k].startNode +'", "target":"'+data_temp_rels[k].endNode+'", "relname":"'+data_temp_rels[k].type+'"}'
                                                                                                                                                                            var rel = JSON.parse(rel)
                                                                                                                                                                            Neo_Rels.push(rel)
                                                                                                                                                                        }

                                                                                                                                                } // End of format response loop


                                                                                                                                                // Assign formatted data to data placeholders
                                                                                                                                                var Neo_Nodes = [...new Set(Neo_Nodes.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));
                                                                                                                                                var Neo_Rels = [...new Set(Neo_Rels.map(obj => JSON.stringify(obj)))].map(str => JSON.parse(str));


                                                                                                                                                // Assign placeholders to single, graphable object
                                                                                                                                                var graph = []
                                                                                                                                                graph.nodes= Neo_Nodes
                                                                                                                                                graph.links= Neo_Rels
                                                                                                                                                
                                                                                                                                                for (A=0; A<graph.nodes.length; A++){

                                                                                                                                                    
                                                                                                                                                    var element = document.createElement('option')
                                                                                                                                                    element.setAttribute('name','NodeCreateRelationSelect')
                                                                                                                                                    element.setAttribute('value',graph.nodes[A].id)
                                                                                                                                                    element.innerText=graph.nodes[A].name +"  -  "+graph.nodes[A].label
                                                                                                                                                    element.identifier = graph.nodes[A].id
                                                                                                                                                    NodeDropdown.appendChild(element)

                                                                                                                                                }


                                                                                                                        }
                                                                                                                        else {console.log('UNSUCESSFULCALL')}

                                                                                                                        }) // end of START API call



                                                                                                                        // Relationship Declare
                                                                                                                        NewRelnameArray = []
                                                                                                                        var NewRelName = document.createElement('input')
                                                                                                                        NewRelName.setAttribute('type','text')
                                                                                                                        NewRelName.setAttribute('class','labelselectClass')
                                                                                                                        NewRelName.setAttribute('style','    left: -313px;position: relative;width: 300px;')
                                                                                                                        NewRelName.addEventListener('input',function(){
                                                                                                                            var keeper = NewRelName.value
                                                                                                                            keeper = keeper.toUpperCase()
                                                                                                                            keeper = keeper.replace(/ /g, "_");
                                                                                                                            keeper = keeper.replace(/"/g, "");
                                                                                                                            keeper = keeper.replace(/[()]/g, ''); 
                                                                                                                            keeper = keeper.replace(/'/g, "");
                                                                                                                            //keeper = keeper.s
                                                                                                                            NewRelNameTranslate.innerText = 'Translated value will be:  '+keeper
                                                                                                                            NewRelnameArray.push(keeper)
                                                                                                                        })
                                                                                                                        createRelSecondwindow.appendChild(NewRelName)

                                                                                                                        var NewRelNameTranslate = document.createElement('h5')
                                                                                                                        NewRelNameTranslate.setAttribute('style','position: absolute;left: 468px; top: 241px;')
                                                                                                                        createRelSecondwindow.appendChild(NewRelNameTranslate)

                                                                                                                        //Relationship Instruction
                                                                                                                        var Node_To_Select = document.createElement('h3')
                                                                                                                        Node_To_Select.setAttribute('style','position: absolute; left: 31px; top: 237px;')
                                                                                                                        Node_To_Select.innerText= 'Relationship:'
                                                                                                                        createRelSecondwindow.appendChild(Node_To_Select)

                                                                                                                        // Indicate Direction
                                                                                                                        RelDirectionSelect = document.createElement('select')
                                                                                                                        RelDirectionSelect.setAttribute('class','labelselectClass')
                                                                                                                        RelDirectionSelect.setAttribute('style','top: 121px; left: 151px; width: 550px;')
                                                                                                                        RelDirectionSelect.setAttribute('id','RelDirectionSelect')
                                                                                                                        createRelSecondwindow.appendChild(RelDirectionSelect)
                                                                                                                        RelOptOne = document.createElement('option')
                                                                                                                        RelOptOne.setAttribute('value','0')
                                                                                                                        RelOptOne.innerText = 'FROM '+d.name+' TO selected node above'
                                                                                                                        RelDirectionSelect.appendChild(RelOptOne)
                                                                                                                        RelOptTwo = document.createElement('option')
                                                                                                                        RelOptTwo.innerText = 'FROM selected node TO '+d.name
                                                                                                                        RelOptTwo.setAttribute('value','1')
                                                                                                                        RelDirectionSelect.appendChild(RelOptTwo)

                                                                                                                        //Direction Instruction
                                                                                                                        var Direction_To_Select = document.createElement('h3')
                                                                                                                        Direction_To_Select.setAttribute('style','position: absolute; left: 31px; top: 304px;')
                                                                                                                        Direction_To_Select.innerText= 'Direction:'
                                                                                                                        createRelSecondwindow.appendChild(Direction_To_Select)


                                                                                                                        // Submit
                                                                                                                        var Submit_CreateRel = document.createElement('button')
                                                                                                                            Submit_CreateRel.setAttribute('class','cyphersubmit')
                                                                                                                            Submit_CreateRel.setAttribute('style','top:390px; ')
                                                                                                                            Submit_CreateRel.innerText='Submit'
                                                                                                                            createRelSecondwindow.appendChild(Submit_CreateRel)
                                                                                                                            // match(n) where id(n)=115 detach delete n

                                                                                                                            Submit_CreateRel.addEventListener('click',function(){
                                                                                                                                                
                                                                                                                                                // MATCH (a),(b) WHERE id(a) = 118 AND id(b) = 117 CREATE (a)-[r:OWNS]->(b)
                                                                                                                                                var newnodeID = NodeDropdown.value
                                                                                                                                                var newRelname = NewRelnameArray[NewRelnameArray.length-1]
                                                                                                                                                var direct = document.getElementById('RelDirectionSelect').value
                                                                                                                                                        if(parseInt(direct) ===  0){
                                                                                                                                                            console.log(' THE VALUE IS --- '+direct)
                                                                                                                                                            var query = 'MATCH (a), (b) where id(a) ='+d.id+' and id(b) = '+newnodeID+' CREATE (a)-[r:'+newRelname+']->(b)'
                                                                                                                                                            console.log(query)
                                                                                                                                                                                                    
                                                                                                                                                    
                                                                                                                                                        var thequery = JSON.stringify({"statements":[{"statement":query}]});
                                                                                                                                                        RMxhr = new XMLHttpRequest;
                                                                                                                                                        var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                                                                var URL = Environment[selector][0].URL
                                                                                                                                                                var PASS = Environment[selector][1].BasicPass

                                                                                                                                                        RMxhr.open("POST", URL+":7474/db/data/transaction/commit");
                                                                                                                                                        ///db/neo4j/tx
                                                                                                                                                        RMxhr.setRequestHeader("Content-Type", "application/json");
                                                                                                                                                        RMxhr.setRequestHeader("Accept", "application/json");
                                                                                                                                                        RMxhr.setRequestHeader("Authorization", "Basic "+PASS);
                                                                                                                                                        RMxhr.withCredentials = false;
                                                                                                                                                        RMxhr.send(thequery);
                                                                                                                                                        
                                                                                                                                                    // API call event listener for successful call
                                                                                                                                                        RMxhr.addEventListener("readystatechange", function() {
                                                                                                                                                            console.log('OG IS    '+this.responseText)
                                                                                                                                                        if(this.readyState === 4) { 
                                                                                                                                                                    $( "#exit_tooltip_createrel" ).click();
                                                                                                                                                                    console.log(this.responseText)
                                                                                                                                                                    d3.selectAll("svg > *").remove();
                                                                                                                                                                    try{Run_New_Graph(globalQuery[globalQuery.length-1])} catch{ try{Run_Schema_Graph('CALL db.schema.visualization()')}catch{console.log("Inner works :)")}}
                                                                                                                                                                    //Run_Schema_Graph('CALL db.schema.visualization()')

                                                                                                                                                                    try{$( "#exit_tooltip" ).click();}catch{}

                                                                                                                                                                    try {removeElement('CreateRelWindow')
                                                                                                                                                                    $(createRelSecondwindow).animate({left: '-100%'}, "slow")
                                                                                                                                                                    $(createRelBackwindow).fadeOut(800);
                                                                                                                                                                    } catch {console.log('no need, exit click worked')}
                                                                                                                                                                    $('#Success_Message').fadeIn()
                                                                                                                                                                    setTimeout(function(){$('#Success_Message').fadeOut()},6000)




                                                                                                                                                        } else {
                                                                                                                                                            console.log('This query didnt work!')}

                                                                                                                                                            

                                                                                                                                                        }//function end
                                                                                                                                                        )//event lisetern end
                                                                                                                                                } else if (parseInt(direct) ===  1){
                                                                                                                                                    console.log(' THE VALUE IS --- '+direct)                                                                                                                         // MATCH (a),(b) WHERE id(a) = 118 AND id(b) = 117 CREATE (a)-[r:OWNS]->(b)
                                                                                                                                                var newnodeID = NodeDropdown.value
                                                                                                                                                var newRelname = NewRelnameArray[NewRelnameArray.length-1]
                                                                                                                                                var direct = document.getElementById('RelDirectionSelect').value
                                                                                                                                                    var query = 'MATCH (a), (b) where id(a) ='+d.id+' and id(b) = '+newnodeID+' CREATE (a)<-[r:'+newRelname+']-(b)'
                                                                                                                                                    console.log(query)
                                                                                                                                                                                             
                                                                                                                                               
                                                                                                                                                var thequery = JSON.stringify({"statements":[{"statement":query}]});
                                                                                                                                                RMxhr = new XMLHttpRequest;
                                                                                                                                                var selector = EnvironmentSelected[EnvironmentSelected.length-1]
                                                                                                                                                        var URL = Environment[selector][0].URL
                                                                                                                                                        var PASS = Environment[selector][1].BasicPass

                                                                                                                                                RMxhr.open("POST", URL+":7474/db/data/transaction/commit");
                                                                                                                                                ///db/neo4j/tx
                                                                                                                                                RMxhr.setRequestHeader("Content-Type", "application/json");
                                                                                                                                                RMxhr.setRequestHeader("Accept", "application/json");
                                                                                                                                                RMxhr.setRequestHeader("Authorization", "Basic "+PASS);
                                                                                                                                                RMxhr.withCredentials = false;
                                                                                                                                                RMxhr.send(thequery);
                                                                                                                                                
                                                                                                                                            // API call event listener for successful call
                                                                                                                                                RMxhr.addEventListener("readystatechange", function() {
                                                                                                                                                    console.log('OG IS    '+this.responseText)
                                                                                                                                                if(this.readyState === 4) { 
                                                                                                                                                    $( "#exit_tooltip_createrel" ).click();
                                                                                                                                                    console.log(this.responseText)
                                                                                                                                                    d3.selectAll("svg > *").remove();
                                                                                                                                                    try{Run_New_Graph(globalQuery[globalQuery.length-1])} catch{ try{Run_Schema_Graph('CALL db.schema.visualization()')}catch{console.log("Inner works :)")}}
                                                                                                                                                    //Run_Schema_Graph('CALL db.schema.visualization()')

                                                                                                                                                    try{$( "#exit_tooltip" ).click();}catch{}

                                                                                                                                                    try {removeElement('CreateRelWindow')
                                                                                                                                                    $(createRelSecondwindow).animate({left: '-100%'}, "slow")
                                                                                                                                                    $(createRelBackwindow).fadeOut(800);
                                                                                                                                                } catch {console.log('no need, exit click worked')}
                                                                                                                                                    $('#Success_Message').fadeIn()
                                                                                                                                                    setTimeout(function(){$('#Success_Message').fadeOut()},6000)




                                                                                                                                                } else {
                                                                                                                                                    console.log('This query didnt work!')}

                                                                                                                                                    

                                                                                                                                                }//function end
                                                                                                                                                )//event lisetern end
                                                                                                                                                }
                                                                                                                                                
                                                                                                                                                   


                                                                                                                            })
                                                                                                                        

                                                                                                                        // Exit button
                                                                                                                        var CreateRelExit = document.createElement('div')
                                                                                                                        CreateRelExit.setAttribute('class','exit_button')
                                                                                                                        CreateRelExit.setAttribute('id','exit_tooltip_createrel')
                                                                                                                        createRelSecondwindow.appendChild(CreateRelExit)
                                                                                                                        CreateRelExit.addEventListener('click',function(){
                                                                                                                            $(createRelBackwindow).fadeOut(600)
                                                                                                                            setTimeout(removeElement('CreateRelWindow'),2000)
                                                                                                                        })

                                                                                        })


                                                                                


                                                                                        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CREATE RELATIONSHIP END



                                                                                        // Props Addition
                                                                                        var stringprops = d.propsarray
                                                                                        var array = stringprops.split(',');
                                                                                        for (let propname in array){
                                                                                            if (array[propname] === 'name') { continue; }
                                                                                            var att_labels = document.createElement('h5')
                                                                                            att_labels.setAttribute('class','attribute-additions')
                                                                                            var titler = array[propname].replace(/_/g, " ");
                                                                                            titler = titler.replace(/[()]/g, ''); 
                                                                                            att_labels.innerText = capFirstLetter(titler) + '   -   '+eval('d.'+array[propname])+'\n'
                                                                                            tooltip.appendChild(att_labels)
                                                                                            
                                                                                        }


                                                                                        
                                                                                        // Select just this node's immediate
                                                                                        var ImmediateButton = document.createElement('div')
                                                                                        ImmediateButton.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(ImmediateButton)
                                                                                        ImmediateButton.innerText='Show me '+d.name+"'s immediate relationships"
                                                                                        ImmediateButton.addEventListener('click',function(){
                                                                                            var qstring = "MATCH (a:"+d.label+" {name: '"+d.name+"'})-[r]-(b) RETURN r, a, b"
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query =  qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                            element.attr("r", node_default_size);
                                                                                            element.attr('fill',default_color)
                                                                                            element.attr('stroke',default_stroke)
                                                                                        })


                                                                                        // Select X amount of relationships out
                                                                                        var ExtendedButton =  document.createElement('div')
                                                                                        ExtendedButton.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(ExtendedButton)
                                                                                        ExtendedButton.innerText='Show me 2 degrees of  '+d.name+"'s extended relationships"
                                                                                        ExtendedButton.addEventListener('click',function(){
                                                                                            //MATCH (n)-[p]-(m) WHERE id(n)=PASSTHROUGH 
                                                                                            var qstring = "MATCH (n)-[p*0..2]-(m) WHERE id(n)="+d.id+' return n,p,m'
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                            element.attr("r", node_default_size);
                                                                                            element.attr('fill',default_color)
                                                                                            element.attr('stroke',default_stroke)
                                                                                        })





                                                                                        // Show all DOWNstream
                                                                                        var DownstreamButton =  document.createElement('div')
                                                                                        DownstreamButton.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(DownstreamButton)
                                                                                        DownstreamButton.innerText='Show me '+d.name+"'s downstream relationships"
                                                                                        DownstreamButton.addEventListener('click',function(){
                                                                                            //    MATCH (a:Person {name:"Alex Melluzzo"})-[r*0..2]-(b) RETURN DISTINCT b,r
                                                                                            var qstring = "MATCH (a:"+d.label+" {name: '"+d.name+"'})-[r*0..1]->(b) RETURN distinct b,r"
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                            element.attr("r", node_default_size);
                                                                                            element.attr('fill',default_color)
                                                                                            element.attr('stroke',default_stroke)
                                                                                        })


                                                                                        // Show all FEEDING
                                                                                        var FeedingButton =  document.createElement('div')
                                                                                        FeedingButton.setAttribute('class','menuJump')
                                                                                        tooltip.appendChild(FeedingButton)
                                                                                        FeedingButton.innerText='Show me what feeds into '+d.name
                                                                                        FeedingButton.addEventListener('click',function(){
                                                                                            //    MATCH (a:Person {name:"Alex Melluzzo"})-[r*0..2]-(b) RETURN DISTINCT b,r
                                                                                            var qstring = "MATCH (a {name: '"+d.name+"'})<-[r*0..1]-(b) RETURN distinct a,b,r"
                                                                                            d3.selectAll("svg > *").remove();
                                                                                            var query = qstring
                                                                                            try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
                                                                                            globalQuery.push(query)
                                                                                            Run_New_Graph(query)
                                                                                            element.attr("r", node_default_size);
                                                                                            element.attr('fill',default_color)
                                                                                            element.attr('stroke',default_stroke)
                                                                                        })









                                                    // Exit button
                                                    var exit = document.createElement('div')
                                                    exit.setAttribute('class','exit_button')
                                                    exit.setAttribute('id','exit_tooltip')
                                                    tooltip.appendChild(exit)
                                                    exit.addEventListener('click',function(){
                                                        element.attr("r", node_default_size);
                                                        element.attr('fill',default_color)
                                                        element.attr('stroke',default_stroke)
                                                        $(tooltip).animate({left: '-37%'}, "slow")
                                                    
                                                    })




                                                    


                                                    }); // END OF NODE CLICK EVENT















                                                    node.append("title")
                                                        .text(function (d) { return d.name; });
                                                    
                                                    //add zoom capabilities 
                                                    var zoom_handler = d3.zoom()
                                                        .on("zoom", zoom_actions);

                                                    zoom_handler(svg); 

                                                    //Drag functions 
                                                    //d is the node 
                                                    function drag_start(d) {
                                                        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                                                        d.fx = d.x;
                                                        d.fy = d.y;
                                                    }
                                                    
                                                    //make sure you can't drag the circle outside the box
                                                    function drag_drag(d) {
                                                        d.fx = d3.event.x;
                                                        d.fy = d3.event.y;
                                                    }
                                                    
                                                    function drag_end(d) {
                                                        if (!d3.event.active) simulation.alphaTarget(0);
                                                        d.fx = null;
                                                        d.fy = null;
                                                    }
                                                    
                                                    //Zoom functions 
                                                    function zoom_actions(){
                                                        g.attr("transform", d3.event.transform)
                                                    }


                                                    
                                                    function ticked() {
                                                        //update circle positions each tick of the simulation 
                                                        node
                                                            .attr("cx", function(d) { return d.x; })
                                                            .attr("cy", function(d) { return d.y; });
                                                            
                                                        //update link positions 
                                                        link
                                                            .attr("x1", function(d) { return d.source.x; })
                                                            .attr("y1", function(d) { return d.source.y; })
                                                            .attr("x2", function(d) { return d.target.x; })
                                                            .attr("y2", function(d) { return d.target.y; });

                                                        nodeText
                                                            .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });


                                                        linkText
                                                            .attr("x", function(d) {
                                                                return ((d.source.x + d.target.x)/2);
                                                            })
                                                            .attr("y", function(d) {
                                                                return ((d.source.y + d.target.y)/2);
                                                            });

                                                    } // End of TICK function



                                                    



                                    } // end of RUN GRAPH function

                            // Execute defined function
                            run(graph)

                    } // End of if Successful clause in API event


            }); // End of API call event listener


    // Send out actual API call
    var selector = EnvironmentSelected[EnvironmentSelected.length-1]
            var URL = Environment[selector][0].URL
            var PASS = Environment[selector][1].BasicPass
    xhr.open("POST", URL+":7474/db/neo4j/tx");
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.setRequestHeader("Accept", "application/json");
    xhr.setRequestHeader("Authorization", "Basic "+PASS);
    xhr.send(dataz);



} // End of Run New Graph Function













// Enable button to execute user query
document.getElementById('submitQuery_Pic').addEventListener('click',function(){
    value = document.getElementById('inputsearch').value;
    string = "MATCH (n) where n.name =~ '(?i).*"+value+".*' return n"
    d3.selectAll("svg > *").remove();
    var query = string
    try{globalQuery.pop()} catch{console.log('no query to pop in globalQuery array')}
    globalQuery.push(query)
    Run_New_Graph(query)
})






























































































































</script>
</html>
